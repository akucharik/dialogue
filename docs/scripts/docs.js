/*! For license information please see docs.js.LICENSE.txt */
(()=>{"use strict";class t{constructor(t){this.text="",this.text=t}get isSpace(){return" "===this.text}}class e{constructor(t){this.characters=[],this.characters=this.getCharacters(t)}getCharacters(e){return Array.from(e).map((e=>new t(e)))}}function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function i(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var n,s,a,o,u,h,l,f,c,p,d,_,m,g,v,y,x,T,w,b,O,M,A,k,C,D,S,P,R={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},E={duration:.5,overwrite:!1,delay:0},z=1e8,F=1e-8,B=2*Math.PI,I=B/4,L=0,N=Math.sqrt,Y=Math.cos,U=Math.sin,X=function(t){return"string"==typeof t},q=function(t){return"function"==typeof t},V=function(t){return"number"==typeof t},j=function(t){return void 0===t},G=function(t){return"object"==typeof t},W=function(t){return!1!==t},Q=function(){return"undefined"!=typeof window},H=function(t){return q(t)||X(t)},Z="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},$=Array.isArray,J=/(?:-?\.?\d|\.)+/gi,K=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,tt=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,et=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,rt=/[+-]=-?[.\d]+/,it=/[^,'"\[\]\s]+/gi,nt=/[\d.+\-=]+(?:e[-+]\d*)*/i,st={},at={},ot=function(t){return(at=Rt(t,st))&&vr},ut=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},ht=function(t,e){return!e&&console.warn(t)},lt=function(t,e){return t&&(st[t]=e)&&at&&(at[t]=e)||st},ft=function(){return 0},ct={},pt=[],dt={},_t={},mt={},gt=30,vt=[],yt="",xt=function(t){var e,r,i=t[0];if(G(i)||q(i)||(t=[t]),!(e=(i._gsap||{}).harness)){for(r=vt.length;r--&&!vt[r].targetTest(i););e=vt[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new qe(t[r],e)))||t.splice(r,1);return t},Tt=function(t){return t._gsap||xt(ue(t))[0]._gsap},wt=function(t,e,r){return(r=t[e])&&q(r)?t[e]():j(r)&&t.getAttribute&&t.getAttribute(e)||r},bt=function(t,e){return(t=t.split(",")).forEach(e)||t},Ot=function(t){return Math.round(1e5*t)/1e5||0},Mt=function(t,e){for(var r=e.length,i=0;t.indexOf(e[i])<0&&++i<r;);return i<r},At=function(){var t,e,r=pt.length,i=pt.slice(0);for(dt={},pt.length=0,t=0;t<r;t++)(e=i[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},kt=function(t,e,r,i){pt.length&&At(),t.render(e,r,i),pt.length&&At()},Ct=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(it).length<2?e:X(t)?t.trim():t},Dt=function(t){return t},St=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},Pt=function(t,e){for(var r in e)r in t||"duration"===r||"ease"===r||(t[r]=e[r])},Rt=function(t,e){for(var r in e)t[r]=e[r];return t},Et=function t(e,r){for(var i in r)"__proto__"!==i&&"constructor"!==i&&"prototype"!==i&&(e[i]=G(r[i])?t(e[i]||(e[i]={}),r[i]):r[i]);return e},zt=function(t,e){var r,i={};for(r in t)r in e||(i[r]=t[r]);return i},Ft=function(t){var e=t.parent||s,r=t.keyframes?Pt:St;if(W(t.inherit))for(;e;)r(t,e.vars.defaults),e=e.parent||e._dp;return t},Bt=function(t,e,r,i){void 0===r&&(r="_first"),void 0===i&&(i="_last");var n=e._prev,s=e._next;n?n._next=s:t[r]===e&&(t[r]=s),s?s._prev=n:t[i]===e&&(t[i]=n),e._next=e._prev=e.parent=null},It=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},Lt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},Nt=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},Yt=function t(e){return!e||e._ts&&t(e.parent)},Ut=function(t){return t._repeat?Xt(t._tTime,t=t.duration()+t._rDelay)*t:0},Xt=function(t,e){var r=Math.floor(t/=e);return t&&r===t?r-1:r},qt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Vt=function(t){return t._end=Ot(t._start+(t._tDur/Math.abs(t._ts||t._rts||F)||0))},jt=function(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=Ot(r._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Vt(t),r._dirty||Lt(r,t)),t},Gt=function(t,e){var r;if((e._time||e._initted&&!e._dur)&&(r=qt(t.rawTime(),e),(!e._dur||ne(0,e.totalDuration(),r)-e._tTime>F)&&e.render(r,!0)),Lt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},Wt=function(t,e,r,i){return e.parent&&It(e),e._start=Ot((V(r)?r:r||t!==s?ee(t,r,e):t._time)+e._delay),e._end=Ot(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),function(t,e,r,i,n){void 0===r&&(r="_first"),void 0===i&&(i="_last");var s,a=t[i];if(n)for(s=e[n];a&&a[n]>s;)a=a._prev;a?(e._next=a._next,a._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[i]=e,e._prev=a,e.parent=e._dp=t}(t,e,"_first","_last",t._sort?"_start":0),$t(e)||(t._recent=e),i||Gt(t,e),t},Qt=function(t,e){return(st.ScrollTrigger||ut("scrollTrigger",e))&&st.ScrollTrigger.create(e,t)},Ht=function(t,e,r,i){return Ze(t,e),t._initted?!r&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&l!==Se.frame?(pt.push(t),t._lazy=[e,i],1):void 0:1},Zt=function t(e){var r=e.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||t(r))},$t=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},Jt=function(t,e,r,i){var n=t._repeat,s=Ot(e)||0,a=t._tTime/t._tDur;return a&&!i&&(t._time*=s/t._dur),t._dur=s,t._tDur=n?n<0?1e10:Ot(s*(n+1)+t._rDelay*n):s,a&&!i?jt(t,t._tTime=t._tDur*a):t.parent&&Vt(t),r||Lt(t.parent,t),t},Kt=function(t){return t instanceof je?Lt(t):Jt(t,t._dur)},te={_start:0,endTime:ft,totalDuration:ft},ee=function t(e,r,i){var n,s,a,o=e.labels,u=e._recent||te,h=e.duration()>=z?u.endTime(!1):e._dur;return X(r)&&(isNaN(r)||r in o)?(s=r.charAt(0),a="%"===r.substr(-1),n=r.indexOf("="),"<"===s||">"===s?(n>=0&&(r=r.replace(/=/,"")),("<"===s?u._start:u.endTime(u._repeat>=0))+(parseFloat(r.substr(1))||0)*(a?(n<0?u:i).totalDuration()/100:1)):n<0?(r in o||(o[r]=h),o[r]):(s=parseFloat(r.charAt(n-1)+r.substr(n+1)),a&&i&&(s=s/100*($(i)?i[0]:i).totalDuration()),n>1?t(e,r.substr(0,n-1),i)+s:h+s)):null==r?h:+r},re=function(t,e,r){var i,n,s=V(e[1]),a=(s?2:1)+(t<2?0:1),o=e[a];if(s&&(o.duration=e[1]),o.parent=r,t){for(i=o,n=r;n&&!("immediateRender"in i);)i=n.vars.defaults||{},n=W(n.vars.inherit)&&n.parent;o.immediateRender=W(i.immediateRender),t<2?o.runBackwards=1:o.startAt=e[a-1]}return new tr(e[0],o,e[a+1])},ie=function(t,e){return t||0===t?e(t):e},ne=function(t,e,r){return r<t?t:r>e?e:r},se=function(t){if("string"!=typeof t)return"";var e=nt.exec(t);return e?t.substr(e.index+e[0].length):""},ae=[].slice,oe=function(t,e){return t&&G(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&G(t[0]))&&!t.nodeType&&t!==a},ue=function(t,e,r){return!X(t)||r||!o&&Pe()?$(t)?function(t,e,r){return void 0===r&&(r=[]),t.forEach((function(t){var i;return X(t)&&!e||oe(t,1)?(i=r).push.apply(i,ue(t)):r.push(t)}))||r}(t,r):oe(t)?ae.call(t,0):t?[t]:[]:ae.call((e||u).querySelectorAll(t),0)},he=function(t){return t.sort((function(){return.5-Math.random()}))},le=function(t){if(q(t))return t;var e=G(t)?t:{each:t},r=Le(e.ease),i=e.from||0,n=parseFloat(e.base)||0,s={},a=i>0&&i<1,o=isNaN(i)||a,u=e.axis,h=i,l=i;return X(i)?h=l={center:.5,edges:.5,end:1}[i]||0:!a&&o&&(h=i[0],l=i[1]),function(t,a,f){var c,p,d,_,m,g,v,y,x,T=(f||e).length,w=s[T];if(!w){if(!(x="auto"===e.grid?0:(e.grid||[1,z])[1])){for(v=-z;v<(v=f[x++].getBoundingClientRect().left)&&x<T;);x--}for(w=s[T]=[],c=o?Math.min(x,T)*h-.5:i%x,p=o?T*l/x-.5:i/x|0,v=0,y=z,g=0;g<T;g++)d=g%x-c,_=p-(g/x|0),w[g]=m=u?Math.abs("y"===u?_:d):N(d*d+_*_),m>v&&(v=m),m<y&&(y=m);"random"===i&&he(w),w.max=v-y,w.min=y,w.v=T=(parseFloat(e.amount)||parseFloat(e.each)*(x>T?T-1:u?"y"===u?T/x:x:Math.max(x,T/x))||0)*("edges"===i?-1:1),w.b=T<0?n-T:n,w.u=se(e.amount||e.each)||0,r=r&&T<0?Be(r):r}return T=(w[t]-w.min)/w.max||0,Ot(w.b+(r?r(T):T)*w.v)+w.u}},fe=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(r){var i=Math.round(parseFloat(r)/t)*t*e;return(i-i%1)/e+(V(r)?0:se(r))}},ce=function(t,e){var r,i,n=$(t);return!n&&G(t)&&(r=n=t.radius||z,t.values?(t=ue(t.values),(i=!V(t[0]))&&(r*=r)):t=fe(t.increment)),ie(e,n?q(t)?function(e){return i=t(e),Math.abs(i-e)<=r?i:e}:function(e){for(var n,s,a=parseFloat(i?e.x:e),o=parseFloat(i?e.y:0),u=z,h=0,l=t.length;l--;)(n=i?(n=t[l].x-a)*n+(s=t[l].y-o)*s:Math.abs(t[l]-a))<u&&(u=n,h=l);return h=!r||u<=r?t[h]:e,i||h===e||V(e)?h:h+se(e)}:fe(t))},pe=function(t,e,r,i){return ie($(t)?!e:!0===r?!!(r=0):!i,(function(){return $(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(i=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*i)/i}))},de=function(t,e,r){return ie(r,(function(r){return t[~~e(r)]}))},_e=function(t){for(var e,r,i,n,s=0,a="";~(e=t.indexOf("random(",s));)i=t.indexOf(")",e),n="["===t.charAt(e+7),r=t.substr(e+7,i-e-7).match(n?it:J),a+=t.substr(s,e-s)+pe(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),s=i+1;return a+t.substr(s,t.length-s)},me=function(t,e,r,i,n){var s=e-t,a=i-r;return ie(n,(function(e){return r+((e-t)/s*a||0)}))},ge=function(t,e,r){var i,n,s,a=t.labels,o=z;for(i in a)(n=a[i]-e)<0==!!r&&n&&o>(n=Math.abs(n))&&(s=i,o=n);return s},ve=function(t,e,r){var i,n,s=t.vars,a=s[e];if(a)return i=s[e+"Params"],n=s.callbackScope||t,r&&pt.length&&At(),i?a.apply(n,i):a.call(n)},ye=function(t){return It(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&ve(t,"onInterrupt"),t},xe=function(t){var e=(t=!t.name&&t.default||t).name,r=q(t),i=e&&!r&&t.init?function(){this._props=[]}:t,n={init:ft,render:hr,add:Qe,kill:fr,modifier:lr,rawVars:0},s={targetTest:0,get:0,getSetter:sr,aliases:{},register:0};if(Pe(),t!==i){if(_t[e])return;St(i,St(zt(t,n),s)),Rt(i.prototype,Rt(n,zt(t,s))),_t[i.prop=e]=i,t.targetTest&&(vt.push(i),ct[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}lt(e,i),t.register&&t.register(vr,i,dr)},Te=255,we={aqua:[0,Te,Te],lime:[0,Te,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,Te],navy:[0,0,128],white:[Te,Te,Te],olive:[128,128,0],yellow:[Te,Te,0],orange:[Te,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[Te,0,0],pink:[Te,192,203],cyan:[0,Te,Te],transparent:[Te,Te,Te,0]},be=function(t,e,r){return(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*Te+.5|0},Oe=function(t,e,r){var i,n,s,a,o,u,h,l,f,c,p=t?V(t)?[t>>16,t>>8&Te,t&Te]:0:we.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),we[t])p=we[t];else if("#"===t.charAt(0)){if(t.length<6&&(i=t.charAt(1),n=t.charAt(2),s=t.charAt(3),t="#"+i+i+n+n+s+s+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&Te,p&Te,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&Te,t&Te]}else if("hsl"===t.substr(0,3))if(p=c=t.match(J),e){if(~t.indexOf("="))return p=t.match(K),r&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,o=+p[1]/100,i=2*(u=+p[2]/100)-(n=u<=.5?u*(o+1):u+o-u*o),p.length>3&&(p[3]*=1),p[0]=be(a+1/3,i,n),p[1]=be(a,i,n),p[2]=be(a-1/3,i,n);else p=t.match(J)||we.transparent;p=p.map(Number)}return e&&!c&&(i=p[0]/Te,n=p[1]/Te,s=p[2]/Te,u=((h=Math.max(i,n,s))+(l=Math.min(i,n,s)))/2,h===l?a=o=0:(f=h-l,o=u>.5?f/(2-h-l):f/(h+l),a=h===i?(n-s)/f+(n<s?6:0):h===n?(s-i)/f+2:(i-n)/f+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*o+.5),p[2]=~~(100*u+.5)),r&&p.length<4&&(p[3]=1),p},Me=function(t){var e=[],r=[],i=-1;return t.split(ke).forEach((function(t){var n=t.match(tt)||[];e.push.apply(e,n),r.push(i+=n.length+1)})),e.c=r,e},Ae=function(t,e,r){var i,n,s,a,o="",u=(t+o).match(ke),h=e?"hsla(":"rgba(",l=0;if(!u)return t;if(u=u.map((function(t){return(t=Oe(t,e,1))&&h+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),r&&(s=Me(t),(i=r.c).join(o)!==s.c.join(o)))for(a=(n=t.replace(ke,"1").split(tt)).length-1;l<a;l++)o+=n[l]+(~i.indexOf(l)?u.shift()||h+"0,0,0,0)":(s.length?s:u.length?u:r).shift());if(!n)for(a=(n=t.split(ke)).length-1;l<a;l++)o+=n[l]+u[l];return o+n[a]},ke=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in we)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Ce=/hsl[a]?\(/,De=function(t){var e,r=t.join(" ");if(ke.lastIndex=0,ke.test(r))return e=Ce.test(r),t[1]=Ae(t[1],e),t[0]=Ae(t[0],e,Me(t[1])),!0},Se=(y=Date.now,x=500,T=33,w=y(),b=w,M=O=1e3/240,k=function t(e){var r,i,n,s,a=y()-b,o=!0===e;if(a>x&&(w+=a-T),((r=(n=(b+=a)-w)-M)>0||o)&&(s=++m.frame,g=n-1e3*m.time,m.time=n/=1e3,M+=r+(r>=O?4:O-r),i=1),o||(p=d(t)),i)for(v=0;v<A.length;v++)A[v](n,g,s,e)},m={time:0,frame:0,tick:function(){k(!0)},deltaRatio:function(t){return g/(1e3/(t||60))},wake:function(){h&&(!o&&Q()&&(a=o=window,u=a.document||{},st.gsap=vr,(a.gsapVersions||(a.gsapVersions=[])).push(vr.version),ot(at||a.GreenSockGlobals||!a.gsap&&a||{}),_=a.requestAnimationFrame),p&&m.sleep(),d=_||function(t){return setTimeout(t,M-1e3*m.time+1|0)},c=1,k(2))},sleep:function(){(_?a.cancelAnimationFrame:clearTimeout)(p),c=0,d=ft},lagSmoothing:function(t,e){x=t||1e8,T=Math.min(e,x,0)},fps:function(t){O=1e3/(t||240),M=1e3*m.time+O},add:function(t){A.indexOf(t)<0&&A.push(t),Pe()},remove:function(t){var e;~(e=A.indexOf(t))&&A.splice(e,1)&&v>=e&&v--},_listeners:A=[]}),Pe=function(){return!c&&Se.wake()},Re={},Ee=/^[\d.\-M][\d.\-,\s]/,ze=/["']/g,Fe=function(t){for(var e,r,i,n={},s=t.substr(1,t.length-3).split(":"),a=s[0],o=1,u=s.length;o<u;o++)r=s[o],e=o!==u-1?r.lastIndexOf(","):r.length,i=r.substr(0,e),n[a]=isNaN(i)?i.replace(ze,"").trim():+i,a=r.substr(e+1).trim();return n},Be=function(t){return function(e){return 1-t(1-e)}},Ie=function t(e,r){for(var i,n=e._first;n;)n instanceof je?t(n,r):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===r||(n.timeline?t(n.timeline,r):(i=n._ease,n._ease=n._yEase,n._yEase=i,n._yoyo=r)),n=n._next},Le=function(t,e){return t&&(q(t)?t:Re[t]||function(t){var e,r,i,n,s=(t+"").split("("),a=Re[s[0]];return a&&s.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[Fe(s[1])]:(e=t,r=e.indexOf("(")+1,i=e.indexOf(")"),n=e.indexOf("(",r),e.substring(r,~n&&n<i?e.indexOf(")",i+1):i)).split(",").map(Ct)):Re._CE&&Ee.test(t)?Re._CE("",t):a}(t))||e},Ne=function(t,e,r,i){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===i&&(i=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var n,s={easeIn:e,easeOut:r,easeInOut:i};return bt(t,(function(t){for(var e in Re[t]=st[t]=s,Re[n=t.toLowerCase()]=r,s)Re[n+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=Re[t+"."+e]=s[e]})),s},Ye=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},Ue=function t(e,r,i){var n=r>=1?r:1,s=(i||(e?.3:.45))/(r<1?r:1),a=s/B*(Math.asin(1/n)||0),o=function(t){return 1===t?1:n*Math.pow(2,-10*t)*U((t-a)*s)+1},u="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:Ye(o);return s=B/s,u.config=function(r,i){return t(e,r,i)},u},Xe=function t(e,r){void 0===r&&(r=1.70158);var i=function(t){return t?--t*t*((r+1)*t+r)+1:0},n="out"===e?i:"in"===e?function(t){return 1-i(1-t)}:Ye(i);return n.config=function(r){return t(e,r)},n};bt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var r=e<5?e+1:e;Ne(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},(function(t){return 1-Math.pow(1-t,r)}),(function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2}))})),Re.Linear.easeNone=Re.none=Re.Linear.easeIn,Ne("Elastic",Ue("in"),Ue("out"),Ue()),C=7.5625,S=1/(D=2.75),Ne("Bounce",(function(t){return 1-P(1-t)}),P=function(t){return t<S?C*t*t:t<.7272727272727273?C*Math.pow(t-1.5/D,2)+.75:t<.9090909090909092?C*(t-=2.25/D)*t+.9375:C*Math.pow(t-2.625/D,2)+.984375}),Ne("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Ne("Circ",(function(t){return-(N(1-t*t)-1)})),Ne("Sine",(function(t){return 1===t?1:1-Y(t*I)})),Ne("Back",Xe("in"),Xe("out"),Xe()),Re.SteppedEase=Re.steps=st.SteppedEase={config:function(t,e){void 0===t&&(t=1);var r=1/t,i=t+(e?0:1),n=e?1:0;return function(t){return((i*ne(0,.99999999,t)|0)+n)*r}}},E.ease=Re["quad.out"],bt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return yt+=t+","+t+"Params,"}));var qe=function(t,e){this.id=L++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:wt,this.set=e?e.getSetter:sr},Ve=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,Jt(this,+t.duration,1,1),this.data=t.data,c||Se.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,Jt(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Pe(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(jt(this,t),!r._dp||r.parent||Gt(r,this);r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Wt(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===F||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),kt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+Ut(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+Ut(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?Xt(this._tTime,r)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?qt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,Nt(this.totalTime(ne(-this._delay,this._tDur,e),!0))},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Pe(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==F&&(this._tTime-=F)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Wt(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(W(t)?this.totalDuration():this.duration())/Math.abs(this._ts)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?qt(e.rawTime(t),this):this._tTime:this._tTime},e.globalTime=function(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(e._ts||1),e=e._dp;return r},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,Kt(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,Kt(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(ee(this,t),W(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,W(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-F))},e.eventCallback=function(t,e,r){var i=this.vars;return arguments.length>1?(e?(i[t]=e,r&&(i[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete i[t],this):i[t]},e.then=function(t){var e=this;return new Promise((function(r){var i=q(t)?t:Dt,n=function(){var t=e.then;e.then=null,q(i)&&(i=i(e))&&(i.then||i===e)&&(e.then=t),r(i),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?n():e._prom=n}))},e.kill=function(){ye(this)},t}();St(Ve.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var je=function(t){function e(e,i){var n;return void 0===e&&(e={}),(n=t.call(this,e)||this).labels={},n.smoothChildTiming=!!e.smoothChildTiming,n.autoRemoveChildren=!!e.autoRemoveChildren,n._sort=W(e.sortChildren),s&&Wt(e.parent||s,r(n),i),e.reversed&&n.reverse(),e.paused&&n.paused(!0),e.scrollTrigger&&Qt(r(n),e.scrollTrigger),n}i(e,t);var n=e.prototype;return n.to=function(t,e,r){return re(0,arguments,this),this},n.from=function(t,e,r){return re(1,arguments,this),this},n.fromTo=function(t,e,r,i){return re(2,arguments,this),this},n.set=function(t,e,r){return e.duration=0,e.parent=this,Ft(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new tr(t,e,ee(this,r),1),this},n.call=function(t,e,r){return Wt(this,tr.delayedCall(0,t,e),r)},n.staggerTo=function(t,e,r,i,n,s,a){return r.duration=e,r.stagger=r.stagger||i,r.onComplete=s,r.onCompleteParams=a,r.parent=this,new tr(t,r,ee(this,n)),this},n.staggerFrom=function(t,e,r,i,n,s,a){return r.runBackwards=1,Ft(r).immediateRender=W(r.immediateRender),this.staggerTo(t,e,r,i,n,s,a)},n.staggerFromTo=function(t,e,r,i,n,s,a,o){return i.startAt=r,Ft(i).immediateRender=W(i.immediateRender),this.staggerTo(t,e,i,n,s,a,o)},n.render=function(t,e,r){var i,n,a,o,u,h,l,f,c,p,d,_,m=this._time,g=this._dirty?this.totalDuration():this._tDur,v=this._dur,y=this!==s&&t>g-F&&t>=0?g:t<F?0:t,x=this._zTime<0!=t<0&&(this._initted||!v);if(y!==this._tTime||r||x){if(m!==this._time&&v&&(y+=this._time-m,t+=this._time-m),i=y,c=this._start,h=!(f=this._ts),x&&(v||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(d=this._yoyo,u=v+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*u+t,e,r);if(i=Ot(y%u),y===g?(o=this._repeat,i=v):((o=~~(y/u))&&o===y/u&&(i=v,o--),i>v&&(i=v)),p=Xt(this._tTime,u),!m&&this._tTime&&p!==o&&(p=o),d&&1&o&&(i=v-i,_=1),o!==p&&!this._lock){var T=d&&1&p,w=T===(d&&1&o);if(o<p&&(T=!T),m=T?0:v,this._lock=1,this.render(m||(_?0:Ot(o*u)),e,!v)._lock=0,this._tTime=y,!e&&this.parent&&ve(this,"onRepeat"),this.vars.repeatRefresh&&!_&&(this.invalidate()._lock=1),m&&m!==this._time||h!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(v=this._dur,g=this._tDur,w&&(this._lock=2,m=T?v:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!_&&this.invalidate()),this._lock=0,!this._ts&&!h)return this;Ie(this,_)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(l=function(t,e,r){var i;if(r>e)for(i=t._first;i&&i._start<=r;){if(!i._dur&&"isPause"===i.data&&i._start>e)return i;i=i._next}else for(i=t._last;i&&i._start>=r;){if(!i._dur&&"isPause"===i.data&&i._start<e)return i;i=i._prev}}(this,Ot(m),Ot(i)))&&(y-=i-(i=l._start)),this._tTime=y,this._time=i,this._act=!f,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,m=0),!m&&i&&!e&&(ve(this,"onStart"),this._tTime!==y))return this;if(i>=m&&t>=0)for(n=this._first;n;){if(a=n._next,(n._act||i>=n._start)&&n._ts&&l!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(n._ts>0?(i-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(i-n._start)*n._ts,e,r),i!==this._time||!this._ts&&!h){l=0,a&&(y+=this._zTime=-1e-8);break}}n=a}else{n=this._last;for(var b=t<0?t:i;n;){if(a=n._prev,(n._act||b<=n._end)&&n._ts&&l!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(n._ts>0?(b-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(b-n._start)*n._ts,e,r),i!==this._time||!this._ts&&!h){l=0,a&&(y+=this._zTime=b?-1e-8:F);break}}n=a}}if(l&&!e&&(this.pause(),l.render(i>=m?0:-1e-8)._zTime=i>=m?1:-1,this._ts))return this._start=c,Vt(this),this.render(t,e,r);this._onUpdate&&!e&&ve(this,"onUpdate",!0),(y===g&&g>=this.totalDuration()||!y&&m)&&(c!==this._start&&Math.abs(f)===Math.abs(this._ts)||this._lock||((t||!v)&&(y===g&&this._ts>0||!y&&this._ts<0)&&It(this,1),e||t<0&&!m||!y&&!m&&g||(ve(this,y===g&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(y<g&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(t,e){var r=this;if(V(e)||(e=ee(this,e,t)),!(t instanceof Ve)){if($(t))return t.forEach((function(t){return r.add(t,e)})),this;if(X(t))return this.addLabel(t,e);if(!q(t))return this;t=tr.delayedCall(0,t)}return this!==t?Wt(this,t,e):this},n.getChildren=function(t,e,r,i){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===i&&(i=-z);for(var n=[],s=this._first;s;)s._start>=i&&(s instanceof tr?e&&n.push(s):(r&&n.push(s),t&&n.push.apply(n,s.getChildren(!0,e,r)))),s=s._next;return n},n.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},n.remove=function(t){return X(t)?this.removeLabel(t):q(t)?this.killTweensOf(t):(Bt(this,t),t===this._recent&&(this._recent=this._last),Lt(this))},n.totalTime=function(e,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=Ot(Se.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,r),this._forcing=0,this):this._tTime},n.addLabel=function(t,e){return this.labels[t]=ee(this,e),this},n.removeLabel=function(t){return delete this.labels[t],this},n.addPause=function(t,e,r){var i=tr.delayedCall(0,e||ft,r);return i.data="isPause",this._hasPause=1,Wt(this,i,ee(this,t))},n.removePause=function(t){var e=this._first;for(t=ee(this,t);e;)e._start===t&&"isPause"===e.data&&It(e),e=e._next},n.killTweensOf=function(t,e,r){for(var i=this.getTweensOf(t,r),n=i.length;n--;)Ge!==i[n]&&i[n].kill(t,e);return this},n.getTweensOf=function(t,e){for(var r,i=[],n=ue(t),s=this._first,a=V(e);s;)s instanceof tr?Mt(s._targets,n)&&(a?(!Ge||s._initted&&s._ts)&&s.globalTime(0)<=e&&s.globalTime(s.totalDuration())>e:!e||s.isActive())&&i.push(s):(r=s.getTweensOf(n,e)).length&&i.push.apply(i,r),s=s._next;return i},n.tweenTo=function(t,e){e=e||{};var r,i=this,n=ee(i,t),s=e,a=s.startAt,o=s.onStart,u=s.onStartParams,h=s.immediateRender,l=tr.to(i,St({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:e.duration||Math.abs((n-(a&&"time"in a?a.time:i._time))/i.timeScale())||F,onStart:function(){if(i.pause(),!r){var t=e.duration||Math.abs((n-(a&&"time"in a?a.time:i._time))/i.timeScale());l._dur!==t&&Jt(l,t,0,1).render(l._time,!0,!0),r=1}o&&o.apply(l,u||[])}},e));return h?l.render(0):l},n.tweenFromTo=function(t,e,r){return this.tweenTo(e,St({startAt:{time:ee(this,t)}},r))},n.recent=function(){return this._recent},n.nextLabel=function(t){return void 0===t&&(t=this._time),ge(this,ee(this,t))},n.previousLabel=function(t){return void 0===t&&(t=this._time),ge(this,ee(this,t),1)},n.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+F)},n.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var i,n=this._first,s=this.labels;n;)n._start>=r&&(n._start+=t,n._end+=t),n=n._next;if(e)for(i in s)s[i]>=r&&(s[i]+=t);return Lt(this)},n.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},n.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Lt(this)},n.totalDuration=function(t){var e,r,i,n=0,a=this,o=a._last,u=z;if(arguments.length)return a.timeScale((a._repeat<0?a.duration():a.totalDuration())/(a.reversed()?-t:t));if(a._dirty){for(i=a.parent;o;)e=o._prev,o._dirty&&o.totalDuration(),(r=o._start)>u&&a._sort&&o._ts&&!a._lock?(a._lock=1,Wt(a,o,r-o._delay,1)._lock=0):u=r,r<0&&o._ts&&(n-=r,(!i&&!a._dp||i&&i.smoothChildTiming)&&(a._start+=r/a._ts,a._time-=r,a._tTime-=r),a.shiftChildren(-r,!1,-Infinity),u=0),o._end>n&&o._ts&&(n=o._end),o=e;Jt(a,a===s&&a._time>n?a._time:n,1,1),a._dirty=0}return a._tDur},e.updateRoot=function(t){if(s._ts&&(kt(s,qt(t,s)),l=Se.frame),Se.frame>=gt){gt+=R.autoSleep||120;var e=s._first;if((!e||!e._ts)&&R.autoSleep&&Se._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Se.sleep()}}},e}(Ve);St(je.prototype,{_lock:0,_hasPause:0,_forcing:0});var Ge,We=function(t,e,r,i,n,s,a){var o,u,h,l,f,c,p,d,_=new dr(this._pt,t,e,0,1,ur,null,n),m=0,g=0;for(_.b=r,_.e=i,r+="",(p=~(i+="").indexOf("random("))&&(i=_e(i)),s&&(s(d=[r,i],t,e),r=d[0],i=d[1]),u=r.match(et)||[];o=et.exec(i);)l=o[0],f=i.substring(m,o.index),h?h=(h+1)%5:"rgba("===f.substr(-5)&&(h=1),l!==u[g++]&&(c=parseFloat(u[g-1])||0,_._pt={_next:_._pt,p:f||1===g?f:",",s:c,c:"="===l.charAt(1)?parseFloat(l.substr(2))*("-"===l.charAt(0)?-1:1):parseFloat(l)-c,m:h&&h<4?Math.round:0},m=et.lastIndex);return _.c=m<i.length?i.substring(m,i.length):"",_.fp=a,(rt.test(i)||p)&&(_.e=0),this._pt=_,_},Qe=function(t,e,r,i,n,s,a,o,u){q(i)&&(i=i(n||0,t,s));var h,l=t[e],f="get"!==r?r:q(l)?u?t[e.indexOf("set")||!q(t["get"+e.substr(3)])?e:"get"+e.substr(3)](u):t[e]():l,c=q(l)?u?ir:rr:er;if(X(i)&&(~i.indexOf("random(")&&(i=_e(i)),"="===i.charAt(1)&&((h=parseFloat(f)+parseFloat(i.substr(2))*("-"===i.charAt(0)?-1:1)+(se(f)||0))||0===h)&&(i=h)),f!==i)return isNaN(f*i)||""===i?(!l&&!(e in t)&&ut(e,i),We.call(this,t,e,f,i,c,o||R.stringFilter,u)):(h=new dr(this._pt,t,e,+f||0,i-(f||0),"boolean"==typeof l?or:ar,0,c),u&&(h.fp=u),a&&h.modifier(a,this,t),this._pt=h)},He=function(t,e,r,i,n,s){var a,o,u,h;if(_t[t]&&!1!==(a=new _t[t]).init(n,a.rawVars?e[t]:function(t,e,r,i,n){if(q(t)&&(t=$e(t,n,e,r,i)),!G(t)||t.style&&t.nodeType||$(t)||Z(t))return X(t)?$e(t,n,e,r,i):t;var s,a={};for(s in t)a[s]=$e(t[s],n,e,r,i);return a}(e[t],i,n,s,r),r,i,s)&&(r._pt=o=new dr(r._pt,n,t,0,1,a.render,a,0,a.priority),r!==f))for(u=r._ptLookup[r._targets.indexOf(n)],h=a._props.length;h--;)u[a._props[h]]=o;return a},Ze=function t(e,r){var i,a,o,u,h,l,f,c,p,d,_,m,g,v=e.vars,y=v.ease,x=v.startAt,T=v.immediateRender,w=v.lazy,b=v.onUpdate,O=v.onUpdateParams,M=v.callbackScope,A=v.runBackwards,k=v.yoyoEase,C=v.keyframes,D=v.autoRevert,S=e._dur,P=e._startAt,R=e._targets,z=e.parent,B=z&&"nested"===z.data?z.parent._targets:R,I="auto"===e._overwrite&&!n,L=e.timeline;if(L&&(!C||!y)&&(y="none"),e._ease=Le(y,E.ease),e._yEase=k?Be(Le(!0===k?y:k,E.ease)):0,k&&e._yoyo&&!e._repeat&&(k=e._yEase,e._yEase=e._ease,e._ease=k),e._from=!L&&!!v.runBackwards,!L){if(m=(c=R[0]?Tt(R[0]).harness:0)&&v[c.prop],i=zt(v,ct),P&&P.render(-1,!0).kill(),x)if(It(e._startAt=tr.set(R,St({data:"isStart",overwrite:!1,parent:z,immediateRender:!0,lazy:W(w),startAt:null,delay:0,onUpdate:b,onUpdateParams:O,callbackScope:M,stagger:0},x))),r<0&&!T&&!D&&e._startAt.render(-1,!0),T){if(r>0&&!D&&(e._startAt=0),S&&r<=0)return void(r&&(e._zTime=r))}else!1===D&&(e._startAt=0);else if(A&&S)if(P)!D&&(e._startAt=0);else if(r&&(T=!1),o=St({overwrite:!1,data:"isFromStart",lazy:T&&W(w),immediateRender:T,stagger:0,parent:z},i),m&&(o[c.prop]=m),It(e._startAt=tr.set(R,o)),r<0&&e._startAt.render(-1,!0),T){if(!r)return}else t(e._startAt,F);for(e._pt=0,w=S&&W(w)||w&&!S,a=0;a<R.length;a++){if(f=(h=R[a])._gsap||xt(R)[a]._gsap,e._ptLookup[a]=d={},dt[f.id]&&pt.length&&At(),_=B===R?a:B.indexOf(h),c&&!1!==(p=new c).init(h,m||i,e,_,B)&&(e._pt=u=new dr(e._pt,h,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(t){d[t]=u})),p.priority&&(l=1)),!c||m)for(o in i)_t[o]&&(p=He(o,i,e,_,h,B))?p.priority&&(l=1):d[o]=u=Qe.call(e,h,o,"get",i[o],_,B,0,v.stringFilter);e._op&&e._op[a]&&e.kill(h,e._op[a]),I&&e._pt&&(Ge=e,s.killTweensOf(h,d,e.globalTime(0)),g=!e.parent,Ge=0),e._pt&&w&&(dt[f.id]=1)}l&&pr(e),e._onInit&&e._onInit(e)}e._onUpdate=b,e._initted=(!e._op||e._pt)&&!g},$e=function(t,e,r,i,n){return q(t)?t.call(e,r,i,n):X(t)&&~t.indexOf("random(")?_e(t):t},Je=yt+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",Ke=(Je+",id,stagger,delay,duration,paused,scrollTrigger").split(","),tr=function(t){function e(e,i,a,o){var u;"number"==typeof i&&(a.duration=i,i=a,a=null);var h,l,f,c,p,d,_,m,g=(u=t.call(this,o?i:Ft(i))||this).vars,v=g.duration,y=g.delay,x=g.immediateRender,T=g.stagger,w=g.overwrite,b=g.keyframes,O=g.defaults,M=g.scrollTrigger,A=g.yoyoEase,k=i.parent||s,C=($(e)||Z(e)?V(e[0]):"length"in i)?[e]:ue(e);if(u._targets=C.length?xt(C):ht("GSAP target "+e+" not found. https://greensock.com",!R.nullTargetWarn)||[],u._ptLookup=[],u._overwrite=w,b||T||H(v)||H(y)){if(i=u.vars,(h=u.timeline=new je({data:"nested",defaults:O||{}})).kill(),h.parent=h._dp=r(u),h._start=0,b)St(h.vars.defaults,{ease:"none"}),T?C.forEach((function(t,e){return b.forEach((function(r,i){return h.to(t,r,i?">":e*T)}))})):b.forEach((function(t){return h.to(C,t,">")}));else{if(c=C.length,_=T?le(T):ft,G(T))for(p in T)~Je.indexOf(p)&&(m||(m={}),m[p]=T[p]);for(l=0;l<c;l++){for(p in f={},i)Ke.indexOf(p)<0&&(f[p]=i[p]);f.stagger=0,A&&(f.yoyoEase=A),m&&Rt(f,m),d=C[l],f.duration=+$e(v,r(u),l,d,C),f.delay=(+$e(y,r(u),l,d,C)||0)-u._delay,!T&&1===c&&f.delay&&(u._delay=y=f.delay,u._start+=y,f.delay=0),h.to(d,f,_(l,d,C))}h.duration()?v=y=0:u.timeline=0}v||u.duration(v=h.duration())}else u.timeline=0;return!0!==w||n||(Ge=r(u),s.killTweensOf(C),Ge=0),Wt(k,r(u),a),i.reversed&&u.reverse(),i.paused&&u.paused(!0),(x||!v&&!b&&u._start===Ot(k._time)&&W(x)&&Yt(r(u))&&"nested"!==k.data)&&(u._tTime=-1e-8,u.render(Math.max(0,-y))),M&&Qt(r(u),M),u}i(e,t);var a=e.prototype;return a.render=function(t,e,r){var i,n,s,a,o,u,h,l,f,c=this._time,p=this._tDur,d=this._dur,_=t>p-F&&t>=0?p:t<F?0:t;if(d){if(_!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=t<0){if(i=_,l=this.timeline,this._repeat){if(a=d+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*a+t,e,r);if(i=Ot(_%a),_===p?(s=this._repeat,i=d):((s=~~(_/a))&&s===_/a&&(i=d,s--),i>d&&(i=d)),(u=this._yoyo&&1&s)&&(f=this._yEase,i=d-i),o=Xt(this._tTime,a),i===c&&!r&&this._initted)return this;s!==o&&(l&&this._yEase&&Ie(l,u),!this.vars.repeatRefresh||u||this._lock||(this._lock=r=1,this.render(Ot(a*s),!0).invalidate()._lock=0))}if(!this._initted){if(Ht(this,t<0?t:i,r,e))return this._tTime=0,this;if(d!==this._dur)return this.render(t,e,r)}if(this._tTime=_,this._time=i,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=h=(f||this._ease)(i/d),this._from&&(this.ratio=h=1-h),i&&!c&&!e&&(ve(this,"onStart"),this._tTime!==_))return this;for(n=this._pt;n;)n.r(h,n.d),n=n._next;l&&l.render(t<0?t:!i&&u?-1e-8:l._dur*h,e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(t<0&&this._startAt&&this._startAt.render(t,!0,r),ve(this,"onUpdate")),this._repeat&&s!==o&&this.vars.onRepeat&&!e&&this.parent&&ve(this,"onRepeat"),_!==this._tDur&&_||this._tTime!==_||(t<0&&this._startAt&&!this._onUpdate&&this._startAt.render(t,!0,!0),(t||!d)&&(_===this._tDur&&this._ts>0||!_&&this._ts<0)&&It(this,1),e||t<0&&!c||!_&&!c||(ve(this,_===p?"onComplete":"onReverseComplete",!0),this._prom&&!(_<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,r,i){var n,s,a,o=t.ratio,u=e<0||!e&&(!t._start&&Zt(t)&&(t._initted||!$t(t))||(t._ts<0||t._dp._ts<0)&&!$t(t))?0:1,h=t._rDelay,l=0;if(h&&t._repeat&&(l=ne(0,t._tDur,e),s=Xt(l,h),a=Xt(t._tTime,h),t._yoyo&&1&s&&(u=1-u),s!==a&&(o=1-u,t.vars.repeatRefresh&&t._initted&&t.invalidate())),u!==o||i||t._zTime===F||!e&&t._zTime){if(!t._initted&&Ht(t,e,i,r))return;for(a=t._zTime,t._zTime=e||(r?F:0),r||(r=e&&!a),t.ratio=u,t._from&&(u=1-u),t._time=0,t._tTime=l,n=t._pt;n;)n.r(u,n.d),n=n._next;t._startAt&&e<0&&t._startAt.render(e,!0,!0),t._onUpdate&&!r&&ve(t,"onUpdate"),l&&t._repeat&&!r&&t.parent&&ve(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===u&&(u&&It(t,1),r||(ve(t,u?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},a.targets=function(){return this._targets},a.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},a.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?ye(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Ge&&!0!==Ge.vars.overwrite)._first||ye(this),this.parent&&r!==this.timeline.totalDuration()&&Jt(this,this._dur*this.timeline._tDur/r,0,1),this}var i,n,s,a,o,u,h,l=this._targets,f=t?ue(t):l,c=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var r=t.length,i=r===e.length;i&&r--&&t[r]===e[r];);return r<0}(l,f))return"all"===e&&(this._pt=0),ye(this);for(i=this._op=this._op||[],"all"!==e&&(X(e)&&(o={},bt(e,(function(t){return o[t]=1})),e=o),e=function(t,e){var r,i,n,s,a=t[0]?Tt(t[0]).harness:0,o=a&&a.aliases;if(!o)return e;for(i in r=Rt({},e),o)if(i in r)for(n=(s=o[i].split(",")).length;n--;)r[s[n]]=r[i];return r}(l,e)),h=l.length;h--;)if(~f.indexOf(l[h]))for(o in n=c[h],"all"===e?(i[h]=e,a=n,s={}):(s=i[h]=i[h]||{},a=e),a)(u=n&&n[o])&&("kill"in u.d&&!0!==u.d.kill(o)||Bt(this,u,"_pt"),delete n[o]),"all"!==s&&(s[o]=1);return this._initted&&!this._pt&&p&&ye(this),this},e.to=function(t,r){return new e(t,r,arguments[2])},e.from=function(t,e){return re(1,arguments)},e.delayedCall=function(t,r,i,n){return new e(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:r,onReverseComplete:r,onCompleteParams:i,onReverseCompleteParams:i,callbackScope:n})},e.fromTo=function(t,e,r){return re(2,arguments)},e.set=function(t,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new e(t,r)},e.killTweensOf=function(t,e,r){return s.killTweensOf(t,e,r)},e}(Ve);St(tr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),bt("staggerTo,staggerFrom,staggerFromTo",(function(t){tr[t]=function(){var e=new je,r=ae.call(arguments,0);return r.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,r)}}));var er=function(t,e,r){return t[e]=r},rr=function(t,e,r){return t[e](r)},ir=function(t,e,r,i){return t[e](i.fp,r)},nr=function(t,e,r){return t.setAttribute(e,r)},sr=function(t,e){return q(t[e])?rr:j(t[e])&&t.setAttribute?nr:er},ar=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},or=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},ur=function(t,e){var r=e._pt,i="";if(!t&&e.b)i=e.b;else if(1===t&&e.e)i=e.e;else{for(;r;)i=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+i,r=r._next;i+=e.c}e.set(e.t,e.p,i,e)},hr=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},lr=function(t,e,r,i){for(var n,s=this._pt;s;)n=s._next,s.p===i&&s.modifier(t,e,r),s=n},fr=function(t){for(var e,r,i=this._pt;i;)r=i._next,i.p===t&&!i.op||i.op===t?Bt(this,i,"_pt"):i.dep||(e=1),i=r;return!e},cr=function(t,e,r,i){i.mSet(t,e,i.m.call(i.tween,r,i.mt),i)},pr=function(t){for(var e,r,i,n,s=t._pt;s;){for(e=s._next,r=i;r&&r.pr>s.pr;)r=r._next;(s._prev=r?r._prev:n)?s._prev._next=s:i=s,(s._next=r)?r._prev=s:n=s,s=e}t._pt=i},dr=function(){function t(t,e,r,i,n,s,a,o,u){this.t=e,this.s=i,this.c=n,this.p=r,this.r=s||ar,this.d=a||this,this.set=o||er,this.pr=u||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=cr,this.m=t,this.mt=r,this.tween=e},t}();bt(yt+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return ct[t]=1})),st.TweenMax=st.TweenLite=tr,st.TimelineLite=st.TimelineMax=je,s=new je({sortChildren:!1,defaults:E,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),R.stringFilter=De;var _r={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return xe(t)}))},timeline:function(t){return new je(t)},getTweensOf:function(t,e){return s.getTweensOf(t,e)},getProperty:function(t,e,r,i){X(t)&&(t=ue(t)[0]);var n=Tt(t||{}).get,s=r?Dt:Ct;return"native"===r&&(r=""),t?e?s((_t[e]&&_t[e].get||n)(t,e,r,i)):function(e,r,i){return s((_t[e]&&_t[e].get||n)(t,e,r,i))}:t},quickSetter:function(t,e,r){if((t=ue(t)).length>1){var i=t.map((function(t){return vr.quickSetter(t,e,r)})),n=i.length;return function(t){for(var e=n;e--;)i[e](t)}}t=t[0]||{};var s=_t[e],a=Tt(t),o=a.harness&&(a.harness.aliases||{})[e]||e,u=s?function(e){var i=new s;f._pt=0,i.init(t,r?e+r:e,f,0,[t]),i.render(1,i),f._pt&&hr(1,f)}:a.set(t,o);return s?u:function(e){return u(t,o,r?e+r:e,a,1)}},isTweening:function(t){return s.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Le(t.ease,E.ease)),Et(E,t||{})},config:function(t){return Et(R,t||{})},registerEffect:function(t){var e=t.name,r=t.effect,i=t.plugins,n=t.defaults,s=t.extendTimeline;(i||"").split(",").forEach((function(t){return t&&!_t[t]&&!st[t]&&ht(e+" effect requires "+t+" plugin.")})),mt[e]=function(t,e,i){return r(ue(t),St(e||{},n),i)},s&&(je.prototype[e]=function(t,r,i){return this.add(mt[e](t,G(r)?r:(i=r)&&{},this),i)})},registerEase:function(t,e){Re[t]=Le(e)},parseEase:function(t,e){return arguments.length?Le(t,e):Re},getById:function(t){return s.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var r,i,n=new je(t);for(n.smoothChildTiming=W(t.smoothChildTiming),s.remove(n),n._dp=0,n._time=n._tTime=s._time,r=s._first;r;)i=r._next,!e&&!r._dur&&r instanceof tr&&r.vars.onComplete===r._targets[0]||Wt(n,r,r._start-r._delay),r=i;return Wt(s,n,0),n},utils:{wrap:function t(e,r,i){var n=r-e;return $(e)?de(e,t(0,e.length),r):ie(i,(function(t){return(n+(t-e)%n)%n+e}))},wrapYoyo:function t(e,r,i){var n=r-e,s=2*n;return $(e)?de(e,t(0,e.length-1),r):ie(i,(function(t){return e+((t=(s+(t-e)%s)%s||0)>n?s-t:t)}))},distribute:le,random:pe,snap:ce,normalize:function(t,e,r){return me(t,e,0,1,r)},getUnit:se,clamp:function(t,e,r){return ie(r,(function(r){return ne(t,e,r)}))},splitColor:Oe,toArray:ue,selector:function(t){return t=ue(t)[0]||ht("Invalid scope")||{},function(e){var r=t.current||t.nativeElement||t;return ue(e,r.querySelectorAll?r:r===t?ht("Invalid scope")||u.createElement("div"):t)}},mapRange:me,pipe:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(r){return t(parseFloat(r))+(e||se(r))}},interpolate:function t(e,r,i,n){var s=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!s){var a,o,u,h,l,f=X(e),c={};if(!0===i&&(n=1)&&(i=null),f)e={p:e},r={p:r};else if($(e)&&!$(r)){for(u=[],h=e.length,l=h-2,o=1;o<h;o++)u.push(t(e[o-1],e[o]));h--,s=function(t){t*=h;var e=Math.min(l,~~t);return u[e](t-e)},i=r}else n||(e=Rt($(e)?[]:{},e));if(!u){for(a in r)Qe.call(c,e,a,"get",r[a]);s=function(t){return hr(t,c)||(f?e.p:e)}}}return ie(i,s)},shuffle:he},install:ot,effects:mt,ticker:Se,updateRoot:je.updateRoot,plugins:_t,globalTimeline:s,core:{PropTween:dr,globals:lt,Tween:tr,Timeline:je,Animation:Ve,getCache:Tt,_removeLinkedListItem:Bt,suppressOverwrites:function(t){return n=t}}};bt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return _r[t]=tr[t]})),Se.add(je.updateRoot),f=_r.to({},{duration:0});var mr=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},gr=function(t,e){return{name:t,rawVars:1,init:function(t,r,i){i._onInit=function(t){var i,n;if(X(r)&&(i={},bt(r,(function(t){return i[t]=1})),r=i),e){for(n in i={},r)i[n]=e(r[n]);r=i}!function(t,e){var r,i,n,s=t._targets;for(r in e)for(i=s.length;i--;)(n=t._ptLookup[i][r])&&(n=n.d)&&(n._pt&&(n=mr(n,r)),n&&n.modifier&&n.modifier(e[r],t,s[i],r))}(t,r)}}}},vr=_r.registerPlugin({name:"attr",init:function(t,e,r,i,n){var s,a;for(s in e)(a=this.add(t,"setAttribute",(t.getAttribute(s)||0)+"",e[s],i,n,0,0,s))&&(a.op=s),this._props.push(s)}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r])}},gr("roundProps",fe),gr("modifiers"),gr("snap",ce))||_r;tr.version=je.version=vr.version="3.7.1",h=1,Q()&&Pe(),Re.Power0,Re.Power1,Re.Power2,Re.Power3,Re.Power4,Re.Linear,Re.Quad,Re.Cubic,Re.Quart,Re.Quint,Re.Strong,Re.Elastic,Re.Back,Re.SteppedEase,Re.Bounce,Re.Sine,Re.Expo,Re.Circ;var yr,xr,Tr,wr,br,Or,Mr,Ar={},kr=180/Math.PI,Cr=Math.PI/180,Dr=Math.atan2,Sr=/([A-Z])/g,Pr=/(?:left|right|width|margin|padding|x)/i,Rr=/[\s,\(]\S/,Er={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},zr=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Fr=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Br=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Ir=function(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)},Lr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},Nr=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},Yr=function(t,e,r){return t.style[e]=r},Ur=function(t,e,r){return t.style.setProperty(e,r)},Xr=function(t,e,r){return t._gsap[e]=r},qr=function(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r},Vr=function(t,e,r,i,n){var s=t._gsap;s.scaleX=s.scaleY=r,s.renderTransform(n,s)},jr=function(t,e,r,i,n){var s=t._gsap;s[e]=r,s.renderTransform(n,s)},Gr="transform",Wr=Gr+"Origin",Qr=function(t,e){var r=xr.createElementNS?xr.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):xr.createElement(t);return r.style?r:xr.createElement(t)},Hr=function t(e,r,i){var n=getComputedStyle(e);return n[r]||n.getPropertyValue(r.replace(Sr,"-$1").toLowerCase())||n.getPropertyValue(r)||!i&&t(e,$r(r)||r,1)||""},Zr="O,Moz,ms,Ms,Webkit".split(","),$r=function(t,e,r){var i=(e||br).style,n=5;if(t in i&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);n--&&!(Zr[n]+t in i););return n<0?null:(3===n?"ms":n>=0?Zr[n]:"")+t},Jr=function(){"undefined"!=typeof window&&window.document&&(yr=window,xr=yr.document,Tr=xr.documentElement,br=Qr("div")||{style:{}},Qr("div"),Gr=$r(Gr),Wr=Gr+"Origin",br.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Mr=!!$r("perspective"),wr=1)},Kr=function t(e){var r,i=Qr("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,s=this.nextSibling,a=this.style.cssText;if(Tr.appendChild(i),i.appendChild(this),this.style.display="block",e)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(r=this._gsapBBox());return n&&(s?n.insertBefore(this,s):n.appendChild(this)),Tr.removeChild(i),this.style.cssText=a,r},ti=function(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])},ei=function(t){var e;try{e=t.getBBox()}catch(r){e=Kr.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===Kr||(e=Kr.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+ti(t,["x","cx","x1"])||0,y:+ti(t,["y","cy","y1"])||0,width:0,height:0}},ri=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!ei(t))},ii=function(t,e){if(e){var r=t.style;e in Ar&&e!==Wr&&(e=Gr),r.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty(e.replace(Sr,"-$1").toLowerCase())):r.removeAttribute(e)}},ni=function(t,e,r,i,n,s){var a=new dr(t._pt,e,r,0,1,s?Nr:Lr);return t._pt=a,a.b=i,a.e=n,t._props.push(r),a},si={deg:1,rad:1,turn:1},ai=function t(e,r,i,n){var s,a,o,u,h=parseFloat(i)||0,l=(i+"").trim().substr((h+"").length)||"px",f=br.style,c=Pr.test(r),p="svg"===e.tagName.toLowerCase(),d=(p?"client":"offset")+(c?"Width":"Height"),_=100,m="px"===n,g="%"===n;return n===l||!h||si[n]||si[l]?h:("px"!==l&&!m&&(h=t(e,r,i,"px")),u=e.getCTM&&ri(e),!g&&"%"!==l||!Ar[r]&&!~r.indexOf("adius")?(f[c?"width":"height"]=_+(m?l:n),a=~r.indexOf("adius")||"em"===n&&e.appendChild&&!p?e:e.parentNode,u&&(a=(e.ownerSVGElement||{}).parentNode),a&&a!==xr&&a.appendChild||(a=xr.body),(o=a._gsap)&&g&&o.width&&c&&o.time===Se.time?Ot(h/o.width*_):((g||"%"===l)&&(f.position=Hr(e,"position")),a===e&&(f.position="static"),a.appendChild(br),s=br[d],a.removeChild(br),f.position="absolute",c&&g&&((o=Tt(a)).time=Se.time,o.width=a[d]),Ot(m?s*h/_:s&&h?_/s*h:0))):(s=u?e.getBBox()[c?"width":"height"]:e[d],Ot(g?h/s*_:h/100*s)))},oi=function(t,e,r,i){var n;return wr||Jr(),e in Er&&"transform"!==e&&~(e=Er[e]).indexOf(",")&&(e=e.split(",")[0]),Ar[e]&&"transform"!==e?(n=vi(t,i),n="transformOrigin"!==e?n[e]:n.svg?n.origin:yi(Hr(t,Wr))+" "+n.zOrigin+"px"):(!(n=t.style[e])||"auto"===n||i||~(n+"").indexOf("calc("))&&(n=fi[e]&&fi[e](t,e,r)||Hr(t,e)||wt(t,e)||("opacity"===e?1:0)),r&&!~(n+"").trim().indexOf(" ")?ai(t,e,n,r)+r:n},ui=function(t,e,r,i){if(!r||"none"===r){var n=$r(e,t,1),s=n&&Hr(t,n,1);s&&s!==r?(e=n,r=s):"borderColor"===e&&(r=Hr(t,"borderTopColor"))}var a,o,u,h,l,f,c,p,d,_,m,g,v=new dr(this._pt,t.style,e,0,1,ur),y=0,x=0;if(v.b=r,v.e=i,r+="","auto"==(i+="")&&(t.style[e]=i,i=Hr(t,e)||i,t.style[e]=r),De(a=[r,i]),i=a[1],u=(r=a[0]).match(tt)||[],(i.match(tt)||[]).length){for(;o=tt.exec(i);)c=o[0],d=i.substring(y,o.index),l?l=(l+1)%5:"rgba("!==d.substr(-5)&&"hsla("!==d.substr(-5)||(l=1),c!==(f=u[x++]||"")&&(h=parseFloat(f)||0,m=f.substr((h+"").length),(g="="===c.charAt(1)?+(c.charAt(0)+"1"):0)&&(c=c.substr(2)),p=parseFloat(c),_=c.substr((p+"").length),y=tt.lastIndex-_.length,_||(_=_||R.units[e]||m,y===i.length&&(i+=_,v.e+=_)),m!==_&&(h=ai(t,e,f,_)||0),v._pt={_next:v._pt,p:d||1===x?d:",",s:h,c:g?g*p:p-h,m:l&&l<4||"zIndex"===e?Math.round:0});v.c=y<i.length?i.substring(y,i.length):""}else v.r="display"===e&&"none"===i?Nr:Lr;return rt.test(i)&&(v.e=0),this._pt=v,v},hi={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},li=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,i,n,s=e.t,a=s.style,o=e.u,u=s._gsap;if("all"===o||!0===o)a.cssText="",i=1;else for(n=(o=o.split(",")).length;--n>-1;)r=o[n],Ar[r]&&(i=1,r="transformOrigin"===r?Wr:Gr),ii(s,r);i&&(ii(s,Gr),u&&(u.svg&&s.removeAttribute("transform"),vi(s,1),u.uncache=1))}},fi={clearProps:function(t,e,r,i,n){if("isFromStart"!==n.data){var s=t._pt=new dr(t._pt,e,r,0,0,li);return s.u=i,s.pr=-10,s.tween=n,t._props.push(r),1}}},ci=[1,0,0,1,0,0],pi={},di=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},_i=function(t){var e=Hr(t,Gr);return di(e)?ci:e.substr(7).match(K).map(Ot)},mi=function(t,e){var r,i,n,s,a=t._gsap||Tt(t),o=t.style,u=_i(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(n=t.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?ci:u:(u!==ci||t.offsetParent||t===Tr||a.svg||(n=o.display,o.display="block",(r=t.parentNode)&&t.offsetParent||(s=1,i=t.nextSibling,Tr.appendChild(t)),u=_i(t),n?o.display=n:ii(t,"display"),s&&(i?r.insertBefore(t,i):r?r.appendChild(t):Tr.removeChild(t))),e&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},gi=function(t,e,r,i,n,s){var a,o,u,h=t._gsap,l=n||mi(t,!0),f=h.xOrigin||0,c=h.yOrigin||0,p=h.xOffset||0,d=h.yOffset||0,_=l[0],m=l[1],g=l[2],v=l[3],y=l[4],x=l[5],T=e.split(" "),w=parseFloat(T[0])||0,b=parseFloat(T[1])||0;r?l!==ci&&(o=_*v-m*g)&&(u=w*(-m/o)+b*(_/o)-(_*x-m*y)/o,w=w*(v/o)+b*(-g/o)+(g*x-v*y)/o,b=u):(w=(a=ei(t)).x+(~T[0].indexOf("%")?w/100*a.width:w),b=a.y+(~(T[1]||T[0]).indexOf("%")?b/100*a.height:b)),i||!1!==i&&h.smooth?(y=w-f,x=b-c,h.xOffset=p+(y*_+x*g)-y,h.yOffset=d+(y*m+x*v)-x):h.xOffset=h.yOffset=0,h.xOrigin=w,h.yOrigin=b,h.smooth=!!i,h.origin=e,h.originIsAbsolute=!!r,t.style[Wr]="0px 0px",s&&(ni(s,h,"xOrigin",f,w),ni(s,h,"yOrigin",c,b),ni(s,h,"xOffset",p,h.xOffset),ni(s,h,"yOffset",d,h.yOffset)),t.setAttribute("data-svg-origin",w+" "+b)},vi=function(t,e){var r=t._gsap||new qe(t);if("x"in r&&!e&&!r.uncache)return r;var i,n,s,a,o,u,h,l,f,c,p,d,_,m,g,v,y,x,T,w,b,O,M,A,k,C,D,S,P,E,z,F,B=t.style,I=r.scaleX<0,L="px",N="deg",Y=Hr(t,Wr)||"0";return i=n=s=u=h=l=f=c=p=0,a=o=1,r.svg=!(!t.getCTM||!ri(t)),m=mi(t,r.svg),r.svg&&(A=(!r.uncache||"0px 0px"===Y)&&!e&&t.getAttribute("data-svg-origin"),gi(t,A||Y,!!A||r.originIsAbsolute,!1!==r.smooth,m)),d=r.xOrigin||0,_=r.yOrigin||0,m!==ci&&(x=m[0],T=m[1],w=m[2],b=m[3],i=O=m[4],n=M=m[5],6===m.length?(a=Math.sqrt(x*x+T*T),o=Math.sqrt(b*b+w*w),u=x||T?Dr(T,x)*kr:0,(f=w||b?Dr(w,b)*kr+u:0)&&(o*=Math.abs(Math.cos(f*Cr))),r.svg&&(i-=d-(d*x+_*w),n-=_-(d*T+_*b))):(F=m[6],E=m[7],D=m[8],S=m[9],P=m[10],z=m[11],i=m[12],n=m[13],s=m[14],h=(g=Dr(F,P))*kr,g&&(A=O*(v=Math.cos(-g))+D*(y=Math.sin(-g)),k=M*v+S*y,C=F*v+P*y,D=O*-y+D*v,S=M*-y+S*v,P=F*-y+P*v,z=E*-y+z*v,O=A,M=k,F=C),l=(g=Dr(-w,P))*kr,g&&(v=Math.cos(-g),z=b*(y=Math.sin(-g))+z*v,x=A=x*v-D*y,T=k=T*v-S*y,w=C=w*v-P*y),u=(g=Dr(T,x))*kr,g&&(A=x*(v=Math.cos(g))+T*(y=Math.sin(g)),k=O*v+M*y,T=T*v-x*y,M=M*v-O*y,x=A,O=k),h&&Math.abs(h)+Math.abs(u)>359.9&&(h=u=0,l=180-l),a=Ot(Math.sqrt(x*x+T*T+w*w)),o=Ot(Math.sqrt(M*M+F*F)),g=Dr(O,M),f=Math.abs(g)>2e-4?g*kr:0,p=z?1/(z<0?-z:z):0),r.svg&&(A=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!di(Hr(t,Gr)),A&&t.setAttribute("transform",A))),Math.abs(f)>90&&Math.abs(f)<270&&(I?(a*=-1,f+=u<=0?180:-180,u+=u<=0?180:-180):(o*=-1,f+=f<=0?180:-180)),r.x=i-((r.xPercent=i&&(r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-i)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+L,r.y=n-((r.yPercent=n&&(r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-n)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+L,r.z=s+L,r.scaleX=Ot(a),r.scaleY=Ot(o),r.rotation=Ot(u)+N,r.rotationX=Ot(h)+N,r.rotationY=Ot(l)+N,r.skewX=f+N,r.skewY=c+N,r.transformPerspective=p+L,(r.zOrigin=parseFloat(Y.split(" ")[2])||0)&&(B[Wr]=yi(Y)),r.xOffset=r.yOffset=0,r.force3D=R.force3D,r.renderTransform=r.svg?Ai:Mr?Mi:Ti,r.uncache=0,r},yi=function(t){return(t=t.split(" "))[0]+" "+t[1]},xi=function(t,e,r){var i=se(e);return Ot(parseFloat(e)+parseFloat(ai(t,"x",r+"px",i)))+i},Ti=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,Mi(t,e)},wi="0deg",bi="0px",Oi=") ",Mi=function(t,e){var r=e||this,i=r.xPercent,n=r.yPercent,s=r.x,a=r.y,o=r.z,u=r.rotation,h=r.rotationY,l=r.rotationX,f=r.skewX,c=r.skewY,p=r.scaleX,d=r.scaleY,_=r.transformPerspective,m=r.force3D,g=r.target,v=r.zOrigin,y="",x="auto"===m&&t&&1!==t||!0===m;if(v&&(l!==wi||h!==wi)){var T,w=parseFloat(h)*Cr,b=Math.sin(w),O=Math.cos(w);w=parseFloat(l)*Cr,T=Math.cos(w),s=xi(g,s,b*T*-v),a=xi(g,a,-Math.sin(w)*-v),o=xi(g,o,O*T*-v+v)}_!==bi&&(y+="perspective("+_+Oi),(i||n)&&(y+="translate("+i+"%, "+n+"%) "),(x||s!==bi||a!==bi||o!==bi)&&(y+=o!==bi||x?"translate3d("+s+", "+a+", "+o+") ":"translate("+s+", "+a+Oi),u!==wi&&(y+="rotate("+u+Oi),h!==wi&&(y+="rotateY("+h+Oi),l!==wi&&(y+="rotateX("+l+Oi),f===wi&&c===wi||(y+="skew("+f+", "+c+Oi),1===p&&1===d||(y+="scale("+p+", "+d+Oi),g.style[Gr]=y||"translate(0, 0)"},Ai=function(t,e){var r,i,n,s,a,o=e||this,u=o.xPercent,h=o.yPercent,l=o.x,f=o.y,c=o.rotation,p=o.skewX,d=o.skewY,_=o.scaleX,m=o.scaleY,g=o.target,v=o.xOrigin,y=o.yOrigin,x=o.xOffset,T=o.yOffset,w=o.forceCSS,b=parseFloat(l),O=parseFloat(f);c=parseFloat(c),p=parseFloat(p),(d=parseFloat(d))&&(p+=d=parseFloat(d),c+=d),c||p?(c*=Cr,p*=Cr,r=Math.cos(c)*_,i=Math.sin(c)*_,n=Math.sin(c-p)*-m,s=Math.cos(c-p)*m,p&&(d*=Cr,a=Math.tan(p-d),n*=a=Math.sqrt(1+a*a),s*=a,d&&(a=Math.tan(d),r*=a=Math.sqrt(1+a*a),i*=a)),r=Ot(r),i=Ot(i),n=Ot(n),s=Ot(s)):(r=_,s=m,i=n=0),(b&&!~(l+"").indexOf("px")||O&&!~(f+"").indexOf("px"))&&(b=ai(g,"x",l,"px"),O=ai(g,"y",f,"px")),(v||y||x||T)&&(b=Ot(b+v-(v*r+y*n)+x),O=Ot(O+y-(v*i+y*s)+T)),(u||h)&&(a=g.getBBox(),b=Ot(b+u/100*a.width),O=Ot(O+h/100*a.height)),a="matrix("+r+","+i+","+n+","+s+","+b+","+O+")",g.setAttribute("transform",a),w&&(g.style[Gr]=a)},ki=function(t,e,r,i,n,s){var a,o,u=360,h=X(n),l=parseFloat(n)*(h&&~n.indexOf("rad")?kr:1),f=s?l*s:l-i,c=i+f+"deg";return h&&("short"===(a=n.split("_")[1])&&(f%=u)!=f%180&&(f+=f<0?u:-360),"cw"===a&&f<0?f=(f+36e9)%u-~~(f/u)*u:"ccw"===a&&f>0&&(f=(f-36e9)%u-~~(f/u)*u)),t._pt=o=new dr(t._pt,e,r,i,f,Fr),o.e=c,o.u="deg",t._props.push(r),o},Ci=function(t,e){for(var r in e)t[r]=e[r];return t},Di=function(t,e,r){var i,n,s,a,o,u,h,l=Ci({},r._gsap),f=r.style;for(n in l.svg?(s=r.getAttribute("transform"),r.setAttribute("transform",""),f[Gr]=e,i=vi(r,1),ii(r,Gr),r.setAttribute("transform",s)):(s=getComputedStyle(r)[Gr],f[Gr]=e,i=vi(r,1),f[Gr]=s),Ar)(s=l[n])!==(a=i[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(o=se(s)!==(h=se(a))?ai(r,n,s,h):parseFloat(s),u=parseFloat(a),t._pt=new dr(t._pt,i,n,o,u-o,zr),t._pt.u=h||0,t._props.push(n));Ci(i,l)};bt("padding,margin,Width,Radius",(function(t,e){var r="Top",i="Right",n="Bottom",s="Left",a=(e<3?[r,i,n,s]:[r+s,r+i,n+i,n+s]).map((function(r){return e<2?t+r:"border"+r+t}));fi[e>1?"border"+t:t]=function(t,e,r,i,n){var s,o;if(arguments.length<4)return s=a.map((function(e){return oi(t,e,r)})),5===(o=s.join(" ")).split(s[0]).length?s[0]:o;s=(i+"").split(" "),o={},a.forEach((function(t,e){return o[t]=s[e]=s[e]||s[(e-1)/2|0]})),t.init(e,o,n)}}));var Si,Pi,Ri={name:"css",register:Jr,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,r,i,n){var s,a,o,u,h,l,f,c,p,d,_,m,g,v,y,x,T,w,b,O=this._props,M=t.style,A=r.vars.startAt;for(f in wr||Jr(),e)if("autoRound"!==f&&(a=e[f],!_t[f]||!He(f,e,r,i,t,n)))if(h=typeof a,l=fi[f],"function"===h&&(h=typeof(a=a.call(r,i,t,n))),"string"===h&&~a.indexOf("random(")&&(a=_e(a)),l)l(this,t,f,a,r)&&(y=1);else if("--"===f.substr(0,2))s=(getComputedStyle(t).getPropertyValue(f)+"").trim(),a+="",ke.lastIndex=0,ke.test(s)||(c=se(s),p=se(a)),p?c!==p&&(s=ai(t,f,s,p)+p):c&&(a+=c),this.add(M,"setProperty",s,a,i,n,0,0,f),O.push(f);else if("undefined"!==h){if(A&&f in A?(s="function"==typeof A[f]?A[f].call(r,i,t,n):A[f],f in R.units&&!se(s)&&(s+=R.units[f]),"="===(s+"").charAt(1)&&(s=oi(t,f))):s=oi(t,f),u=parseFloat(s),(d="string"===h&&"="===a.charAt(1)?+(a.charAt(0)+"1"):0)&&(a=a.substr(2)),o=parseFloat(a),f in Er&&("autoAlpha"===f&&(1===u&&"hidden"===oi(t,"visibility")&&o&&(u=0),ni(this,M,"visibility",u?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==f&&"transform"!==f&&~(f=Er[f]).indexOf(",")&&(f=f.split(",")[0])),_=f in Ar)if(m||((g=t._gsap).renderTransform&&!e.parseTransform||vi(t,e.parseTransform),v=!1!==e.smoothOrigin&&g.smooth,(m=this._pt=new dr(this._pt,M,Gr,0,1,g.renderTransform,g,0,-1)).dep=1),"scale"===f)this._pt=new dr(this._pt,g,"scaleY",g.scaleY,(d?d*o:o-g.scaleY)||0),O.push("scaleY",f),f+="X";else{if("transformOrigin"===f){T=void 0,w=void 0,b=void 0,w=(T=(x=a).split(" "))[0],b=T[1]||"50%","top"!==w&&"bottom"!==w&&"left"!==b&&"right"!==b||(x=w,w=b,b=x),T[0]=hi[w]||w,T[1]=hi[b]||b,a=T.join(" "),g.svg?gi(t,a,0,v,0,this):((p=parseFloat(a.split(" ")[2])||0)!==g.zOrigin&&ni(this,g,"zOrigin",g.zOrigin,p),ni(this,M,f,yi(s),yi(a)));continue}if("svgOrigin"===f){gi(t,a,1,v,0,this);continue}if(f in pi){ki(this,g,f,u,a,d);continue}if("smoothOrigin"===f){ni(this,g,"smooth",g.smooth,a);continue}if("force3D"===f){g[f]=a;continue}if("transform"===f){Di(this,a,t);continue}}else f in M||(f=$r(f)||f);if(_||(o||0===o)&&(u||0===u)&&!Rr.test(a)&&f in M)o||(o=0),(c=(s+"").substr((u+"").length))!==(p=se(a)||(f in R.units?R.units[f]:c))&&(u=ai(t,f,s,p)),this._pt=new dr(this._pt,_?g:M,f,u,d?d*o:o-u,_||"px"!==p&&"zIndex"!==f||!1===e.autoRound?zr:Ir),this._pt.u=p||0,c!==p&&(this._pt.b=s,this._pt.r=Br);else if(f in M)ui.call(this,t,f,s,a);else{if(!(f in t)){ut(f,a);continue}this.add(t,f,s||t[f],a,i,n)}O.push(f)}y&&pr(this)},get:oi,aliases:Er,getSetter:function(t,e,r){var i=Er[e];return i&&i.indexOf(",")<0&&(e=i),e in Ar&&e!==Wr&&(t._gsap.x||oi(t,"x"))?r&&Or===r?"scale"===e?qr:Xr:(Or=r||{})&&("scale"===e?Vr:jr):t.style&&!j(t.style[e])?Yr:~e.indexOf("-")?Ur:sr(t,e)},core:{_removeProperty:ii,_getMatrix:mi}};vr.utils.checkPrefix=$r,Pi=bt("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(Si="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Ar[t]=1})),bt(Si,(function(t){R.units[t]="deg",pi[t]=1})),Er[Pi[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+Si,bt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");Er[e[1]]=Pi[e[0]]})),bt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){R.units[t]="px"})),vr.registerPlugin(Ri);var Ei=vr.registerPlugin(Ri)||vr;Ei.core.Tween;const zi=t=>t/1e3,Fi={animateSpaces:!1,duration:200,ease:window.CustomEase.create("custom","M0,0 C0.34,0.114 0.362,0.902 0.362,1 0.37,0.985 0.414,0.873 0.455,0.811 0.51,0.726 0.573,0.753 0.586,0.762 0.662,0.812 0.719,0.981 0.726,0.998 0.788,0.914 0.84,0.936 0.859,0.95 0.878,0.964 0.897,0.985 0.911,0.998 0.922,0.994 0.939,0.984 0.954,0.984 0.969,0.984 1,1 1,1 "),speed:0,startOpacity:0,startY:-10},Bi=t=>e=>{const r={...Fi,...t},i=Ei.timeline();let n=zi(r.duration),s=zi(r.speed);return!r.animateSpaces&&e.character.isSpace&&(n=0,s=0),i.delay(s).set(e.element,{display:"inline-block"}).fromTo(e.element,{opacity:r.startOpacity,y:r.startY},{duration:n,opacity:1,y:0,ease:r.ease}),i},Ii={animateSpaces:!1,speed:50};class Li{constructor(t,e){this.animation=Ei.timeline(),this.character=t,this.effect=e,this.element=document.createElement("span"),this.updateAnimation()}render(){return this.element.classList.add("dia-dialogue__character"),this.character.isSpace&&this.element.classList.add("dia-dialogue__character--space"),this.element.appendChild(document.createTextNode(this.character.text)),this}updateAnimation(){return this.effect&&(this.animation=this.effect(this)),this}}class Ni{constructor(t,e){this.animation=Ei.timeline(),this.className="",this.delay=0,this.characterRenderers=[],Object.assign(this,e),this.element=document.createElement("span"),this.characterRenderers=t.characters.map((t=>new Li(t,this.characterEffect))),this.text=t,this.updateAnimation()}render(){return this.element.classList.add("dia-dialogue__text"),this.className&&this.element.classList.add(this.className),this.characterRenderers.forEach((t=>{this.element.appendChild(t.render().element)})),this}updateAnimation(){const t=Ei.timeline();return t.delay(zi(this.delay)),this.characterRenderers.forEach((e=>{t.add(e.animation)})),this.animation=t,this}}class Yi{constructor(t,e){this.animation=Ei.timeline(),this.className="",this.delay=0,this.textRenderers=[],Object.assign(this,e),this.element=document.createElement("p"),this.textRenderers=t,this.updateAnimation()}render(){return this.element.classList.add("dia-dialogue__paragraph"),this.className&&this.element.classList.add(this.className),this.textRenderers.forEach((t=>{this.element.appendChild(t.render().element)})),this}updateAnimation(){const t=Ei.timeline();return this.textRenderers.forEach((e=>{t.add(e.animation)})),this.animation=t,this}}class Ui{constructor(t,e,r){this.animation=Ei.timeline({paused:!0}),this.className="",this.delay=0,this.paragraphRenderers=[],Object.assign(this,r),this.element=e,this.paragraphRenderers=t,this.updateAnimation()}play(){return this.animation.play(),this}render(){return this.element.classList.add("dia-dialogue__dialogue"),this.className&&this.element.classList.add(this.className),this.paragraphRenderers.forEach((t=>{this.element.appendChild(t.render().element)})),this}updateAnimation(){const t=Ei.timeline({paused:!0});return this.paragraphRenderers.forEach((e=>{t.add(e.animation)})),this.animation=t,this}}(()=>{const t=new e("Hi... "),r=new e("I'm dialogue."),i=new e("And I'm a second line."),n=new Ni(t,{className:"docs__hi"}),s=new Ni(r,{delay:750,characterEffect:t=>{const e={...Ii},r=Ei.timeline();return e.animateSpaces?r.delay(zi(e.speed)):r.delay(t.character.isSpace?0:zi(e.speed)),r.fromTo(t.element,{opacity:0},{duration:.001,opacity:1}),r}});const a=new Ni(i,{delay:750,characterEffect:Bi()}),o=new Yi([n,s],{className:"docs__paragraph"}),u=new Yi([a],{className:"docs__paragraph"}),h=document.getElementById("dialogue");h&&new Ui([o,u],h,{className:"docs__dialogue"}).render().play()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,