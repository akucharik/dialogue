/*! For license information please see docs.js.LICENSE.txt */
(()=>{"use strict";class t{constructor(t,e={}){this.delay=0,this.speed=50,this.text="",Object.assign(this,e),this.text=t}}class e{constructor(e,r={}){this.className="",this.delay=0,this.speed=50,this.characters=[],Object.assign(this,r);const i=Array.from(e);this.characters=i.map(((e,r)=>new t(e,0===r?{delay:this.delay,speed:this.speed}:{speed:this.speed})))}}class r{constructor(t,e={}){this.className="",this.text=[],Object.assign(this,e),this.text=t}}class i{constructor(t){this.paragraphs=[],this.paragraphs=t}}function n(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function s(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}var a,o,u,h,l,f,c,p,d,_,m,g,v,y,x,T,w,b,O,M,k,A,C,D,S,P,R,E,z={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},F={duration:.5,overwrite:!1,delay:0},B=1e8,I=1e-8,L=2*Math.PI,N=L/4,Y=0,U=Math.sqrt,X=Math.cos,q=Math.sin,V=function(t){return"string"==typeof t},j=function(t){return"function"==typeof t},G=function(t){return"number"==typeof t},W=function(t){return void 0===t},Q=function(t){return"object"==typeof t},H=function(t){return!1!==t},Z=function(){return"undefined"!=typeof window},$=function(t){return j(t)||V(t)},J="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},K=Array.isArray,tt=/(?:-?\.?\d|\.)+/gi,et=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,rt=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,it=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,nt=/[+-]=-?[.\d]+/,st=/[^,'"\[\]\s]+/gi,at=/[\d.+\-=]+(?:e[-+]\d*)*/i,ot={},ut={},ht=function(t){return(ut=zt(t,ot))&&xr},lt=function(t,e){return console.warn("Invalid property",t,"set to",e,"Missing plugin? gsap.registerPlugin()")},ft=function(t,e){return!e&&console.warn(t)},ct=function(t,e){return t&&(ot[t]=e)&&ut&&(ut[t]=e)||ot},pt=function(){return 0},dt={},_t=[],mt={},gt={},vt={},yt=30,xt=[],Tt="",wt=function(t){var e,r,i=t[0];if(Q(i)||j(i)||(t=[t]),!(e=(i._gsap||{}).harness)){for(r=xt.length;r--&&!xt[r].targetTest(i););e=xt[r]}for(r=t.length;r--;)t[r]&&(t[r]._gsap||(t[r]._gsap=new je(t[r],e)))||t.splice(r,1);return t},bt=function(t){return t._gsap||wt(le(t))[0]._gsap},Ot=function(t,e,r){return(r=t[e])&&j(r)?t[e]():W(r)&&t.getAttribute&&t.getAttribute(e)||r},Mt=function(t,e){return(t=t.split(",")).forEach(e)||t},kt=function(t){return Math.round(1e5*t)/1e5||0},At=function(t,e){for(var r=e.length,i=0;t.indexOf(e[i])<0&&++i<r;);return i<r},Ct=function(){var t,e,r=_t.length,i=_t.slice(0);for(mt={},_t.length=0,t=0;t<r;t++)(e=i[t])&&e._lazy&&(e.render(e._lazy[0],e._lazy[1],!0)._lazy=0)},Dt=function(t,e,r,i){_t.length&&Ct(),t.render(e,r,i),_t.length&&Ct()},St=function(t){var e=parseFloat(t);return(e||0===e)&&(t+"").match(st).length<2?e:V(t)?t.trim():t},Pt=function(t){return t},Rt=function(t,e){for(var r in e)r in t||(t[r]=e[r]);return t},Et=function(t,e){for(var r in e)r in t||"duration"===r||"ease"===r||(t[r]=e[r])},zt=function(t,e){for(var r in e)t[r]=e[r];return t},Ft=function t(e,r){for(var i in r)"__proto__"!==i&&"constructor"!==i&&"prototype"!==i&&(e[i]=Q(r[i])?t(e[i]||(e[i]={}),r[i]):r[i]);return e},Bt=function(t,e){var r,i={};for(r in t)r in e||(i[r]=t[r]);return i},It=function(t){var e=t.parent||o,r=t.keyframes?Et:Rt;if(H(t.inherit))for(;e;)r(t,e.vars.defaults),e=e.parent||e._dp;return t},Lt=function(t,e,r,i){void 0===r&&(r="_first"),void 0===i&&(i="_last");var n=e._prev,s=e._next;n?n._next=s:t[r]===e&&(t[r]=s),s?s._prev=n:t[i]===e&&(t[i]=n),e._next=e._prev=e.parent=null},Nt=function(t,e){t.parent&&(!e||t.parent.autoRemoveChildren)&&t.parent.remove(t),t._act=0},Yt=function(t,e){if(t&&(!e||e._end>t._dur||e._start<0))for(var r=t;r;)r._dirty=1,r=r.parent;return t},Ut=function(t){for(var e=t.parent;e&&e.parent;)e._dirty=1,e.totalDuration(),e=e.parent;return t},Xt=function t(e){return!e||e._ts&&t(e.parent)},qt=function(t){return t._repeat?Vt(t._tTime,t=t.duration()+t._rDelay)*t:0},Vt=function(t,e){var r=Math.floor(t/=e);return t&&r===t?r-1:r},jt=function(t,e){return(t-e._start)*e._ts+(e._ts>=0?0:e._dirty?e.totalDuration():e._tDur)},Gt=function(t){return t._end=kt(t._start+(t._tDur/Math.abs(t._ts||t._rts||I)||0))},Wt=function(t,e){var r=t._dp;return r&&r.smoothChildTiming&&t._ts&&(t._start=kt(r._time-(t._ts>0?e/t._ts:((t._dirty?t.totalDuration():t._tDur)-e)/-t._ts)),Gt(t),r._dirty||Yt(r,t)),t},Qt=function(t,e){var r;if((e._time||e._initted&&!e._dur)&&(r=jt(t.rawTime(),e),(!e._dur||ae(0,e.totalDuration(),r)-e._tTime>I)&&e.render(r,!0)),Yt(t,e)._dp&&t._initted&&t._time>=t._dur&&t._ts){if(t._dur<t.duration())for(r=t;r._dp;)r.rawTime()>=0&&r.totalTime(r._tTime),r=r._dp;t._zTime=-1e-8}},Ht=function(t,e,r,i){return e.parent&&Nt(e),e._start=kt((G(r)?r:r||t!==o?ie(t,r,e):t._time)+e._delay),e._end=kt(e._start+(e.totalDuration()/Math.abs(e.timeScale())||0)),function(t,e,r,i,n){void 0===r&&(r="_first"),void 0===i&&(i="_last");var s,a=t[i];if(n)for(s=e[n];a&&a[n]>s;)a=a._prev;a?(e._next=a._next,a._next=e):(e._next=t[r],t[r]=e),e._next?e._next._prev=e:t[i]=e,e._prev=a,e.parent=e._dp=t}(t,e,"_first","_last",t._sort?"_start":0),Kt(e)||(t._recent=e),i||Qt(t,e),t},Zt=function(t,e){return(ot.ScrollTrigger||lt("scrollTrigger",e))&&ot.ScrollTrigger.create(e,t)},$t=function(t,e,r,i){return Je(t,e),t._initted?!r&&t._pt&&(t._dur&&!1!==t.vars.lazy||!t._dur&&t.vars.lazy)&&c!==Re.frame?(_t.push(t),t._lazy=[e,i],1):void 0:1},Jt=function t(e){var r=e.parent;return r&&r._ts&&r._initted&&!r._lock&&(r.rawTime()<0||t(r))},Kt=function(t){var e=t.data;return"isFromStart"===e||"isStart"===e},te=function(t,e,r,i){var n=t._repeat,s=kt(e)||0,a=t._tTime/t._tDur;return a&&!i&&(t._time*=s/t._dur),t._dur=s,t._tDur=n?n<0?1e10:kt(s*(n+1)+t._rDelay*n):s,a&&!i?Wt(t,t._tTime=t._tDur*a):t.parent&&Gt(t),r||Yt(t.parent,t),t},ee=function(t){return t instanceof We?Yt(t):te(t,t._dur)},re={_start:0,endTime:pt,totalDuration:pt},ie=function t(e,r,i){var n,s,a,o=e.labels,u=e._recent||re,h=e.duration()>=B?u.endTime(!1):e._dur;return V(r)&&(isNaN(r)||r in o)?(s=r.charAt(0),a="%"===r.substr(-1),n=r.indexOf("="),"<"===s||">"===s?(n>=0&&(r=r.replace(/=/,"")),("<"===s?u._start:u.endTime(u._repeat>=0))+(parseFloat(r.substr(1))||0)*(a?(n<0?u:i).totalDuration()/100:1)):n<0?(r in o||(o[r]=h),o[r]):(s=parseFloat(r.charAt(n-1)+r.substr(n+1)),a&&i&&(s=s/100*(K(i)?i[0]:i).totalDuration()),n>1?t(e,r.substr(0,n-1),i)+s:h+s)):null==r?h:+r},ne=function(t,e,r){var i,n,s=G(e[1]),a=(s?2:1)+(t<2?0:1),o=e[a];if(s&&(o.duration=e[1]),o.parent=r,t){for(i=o,n=r;n&&!("immediateRender"in i);)i=n.vars.defaults||{},n=H(n.vars.inherit)&&n.parent;o.immediateRender=H(i.immediateRender),t<2?o.runBackwards=1:o.startAt=e[a-1]}return new rr(e[0],o,e[a+1])},se=function(t,e){return t||0===t?e(t):e},ae=function(t,e,r){return r<t?t:r>e?e:r},oe=function(t){if("string"!=typeof t)return"";var e=at.exec(t);return e?t.substr(e.index+e[0].length):""},ue=[].slice,he=function(t,e){return t&&Q(t)&&"length"in t&&(!e&&!t.length||t.length-1 in t&&Q(t[0]))&&!t.nodeType&&t!==u},le=function(t,e,r){return!V(t)||r||!h&&Ee()?K(t)?function(t,e,r){return void 0===r&&(r=[]),t.forEach((function(t){var i;return V(t)&&!e||he(t,1)?(i=r).push.apply(i,le(t)):r.push(t)}))||r}(t,r):he(t)?ue.call(t,0):t?[t]:[]:ue.call((e||l).querySelectorAll(t),0)},fe=function(t){return t.sort((function(){return.5-Math.random()}))},ce=function(t){if(j(t))return t;var e=Q(t)?t:{each:t},r=Ye(e.ease),i=e.from||0,n=parseFloat(e.base)||0,s={},a=i>0&&i<1,o=isNaN(i)||a,u=e.axis,h=i,l=i;return V(i)?h=l={center:.5,edges:.5,end:1}[i]||0:!a&&o&&(h=i[0],l=i[1]),function(t,a,f){var c,p,d,_,m,g,v,y,x,T=(f||e).length,w=s[T];if(!w){if(!(x="auto"===e.grid?0:(e.grid||[1,B])[1])){for(v=-B;v<(v=f[x++].getBoundingClientRect().left)&&x<T;);x--}for(w=s[T]=[],c=o?Math.min(x,T)*h-.5:i%x,p=o?T*l/x-.5:i/x|0,v=0,y=B,g=0;g<T;g++)d=g%x-c,_=p-(g/x|0),w[g]=m=u?Math.abs("y"===u?_:d):U(d*d+_*_),m>v&&(v=m),m<y&&(y=m);"random"===i&&fe(w),w.max=v-y,w.min=y,w.v=T=(parseFloat(e.amount)||parseFloat(e.each)*(x>T?T-1:u?"y"===u?T/x:x:Math.max(x,T/x))||0)*("edges"===i?-1:1),w.b=T<0?n-T:n,w.u=oe(e.amount||e.each)||0,r=r&&T<0?Le(r):r}return T=(w[t]-w.min)/w.max||0,kt(w.b+(r?r(T):T)*w.v)+w.u}},pe=function(t){var e=t<1?Math.pow(10,(t+"").length-2):1;return function(r){var i=Math.round(parseFloat(r)/t)*t*e;return(i-i%1)/e+(G(r)?0:oe(r))}},de=function(t,e){var r,i,n=K(t);return!n&&Q(t)&&(r=n=t.radius||B,t.values?(t=le(t.values),(i=!G(t[0]))&&(r*=r)):t=pe(t.increment)),se(e,n?j(t)?function(e){return i=t(e),Math.abs(i-e)<=r?i:e}:function(e){for(var n,s,a=parseFloat(i?e.x:e),o=parseFloat(i?e.y:0),u=B,h=0,l=t.length;l--;)(n=i?(n=t[l].x-a)*n+(s=t[l].y-o)*s:Math.abs(t[l]-a))<u&&(u=n,h=l);return h=!r||u<=r?t[h]:e,i||h===e||G(e)?h:h+oe(e)}:pe(t))},_e=function(t,e,r,i){return se(K(t)?!e:!0===r?!!(r=0):!i,(function(){return K(t)?t[~~(Math.random()*t.length)]:(r=r||1e-5)&&(i=r<1?Math.pow(10,(r+"").length-2):1)&&Math.floor(Math.round((t-r/2+Math.random()*(e-t+.99*r))/r)*r*i)/i}))},me=function(t,e,r){return se(r,(function(r){return t[~~e(r)]}))},ge=function(t){for(var e,r,i,n,s=0,a="";~(e=t.indexOf("random(",s));)i=t.indexOf(")",e),n="["===t.charAt(e+7),r=t.substr(e+7,i-e-7).match(n?st:tt),a+=t.substr(s,e-s)+_e(n?r:+r[0],n?0:+r[1],+r[2]||1e-5),s=i+1;return a+t.substr(s,t.length-s)},ve=function(t,e,r,i,n){var s=e-t,a=i-r;return se(n,(function(e){return r+((e-t)/s*a||0)}))},ye=function(t,e,r){var i,n,s,a=t.labels,o=B;for(i in a)(n=a[i]-e)<0==!!r&&n&&o>(n=Math.abs(n))&&(s=i,o=n);return s},xe=function(t,e,r){var i,n,s=t.vars,a=s[e];if(a)return i=s[e+"Params"],n=s.callbackScope||t,r&&_t.length&&Ct(),i?a.apply(n,i):a.call(n)},Te=function(t){return Nt(t),t.scrollTrigger&&t.scrollTrigger.kill(!1),t.progress()<1&&xe(t,"onInterrupt"),t},we=function(t){var e=(t=!t.name&&t.default||t).name,r=j(t),i=e&&!r&&t.init?function(){this._props=[]}:t,n={init:pt,render:fr,add:Ze,kill:pr,modifier:cr,rawVars:0},s={targetTest:0,get:0,getSetter:or,aliases:{},register:0};if(Ee(),t!==i){if(gt[e])return;Rt(i,Rt(Bt(t,n),s)),zt(i.prototype,zt(n,Bt(t,s))),gt[i.prop=e]=i,t.targetTest&&(xt.push(i),dt[e]=1),e=("css"===e?"CSS":e.charAt(0).toUpperCase()+e.substr(1))+"Plugin"}ct(e,i),t.register&&t.register(xr,i,mr)},be=255,Oe={aqua:[0,be,be],lime:[0,be,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,be],navy:[0,0,128],white:[be,be,be],olive:[128,128,0],yellow:[be,be,0],orange:[be,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[be,0,0],pink:[be,192,203],cyan:[0,be,be],transparent:[be,be,be,0]},Me=function(t,e,r){return(6*(t=t<0?t+1:t>1?t-1:t)<1?e+(r-e)*t*6:t<.5?r:3*t<2?e+(r-e)*(2/3-t)*6:e)*be+.5|0},ke=function(t,e,r){var i,n,s,a,o,u,h,l,f,c,p=t?G(t)?[t>>16,t>>8&be,t&be]:0:Oe.black;if(!p){if(","===t.substr(-1)&&(t=t.substr(0,t.length-1)),Oe[t])p=Oe[t];else if("#"===t.charAt(0)){if(t.length<6&&(i=t.charAt(1),n=t.charAt(2),s=t.charAt(3),t="#"+i+i+n+n+s+s+(5===t.length?t.charAt(4)+t.charAt(4):"")),9===t.length)return[(p=parseInt(t.substr(1,6),16))>>16,p>>8&be,p&be,parseInt(t.substr(7),16)/255];p=[(t=parseInt(t.substr(1),16))>>16,t>>8&be,t&be]}else if("hsl"===t.substr(0,3))if(p=c=t.match(tt),e){if(~t.indexOf("="))return p=t.match(et),r&&p.length<4&&(p[3]=1),p}else a=+p[0]%360/360,o=+p[1]/100,i=2*(u=+p[2]/100)-(n=u<=.5?u*(o+1):u+o-u*o),p.length>3&&(p[3]*=1),p[0]=Me(a+1/3,i,n),p[1]=Me(a,i,n),p[2]=Me(a-1/3,i,n);else p=t.match(tt)||Oe.transparent;p=p.map(Number)}return e&&!c&&(i=p[0]/be,n=p[1]/be,s=p[2]/be,u=((h=Math.max(i,n,s))+(l=Math.min(i,n,s)))/2,h===l?a=o=0:(f=h-l,o=u>.5?f/(2-h-l):f/(h+l),a=h===i?(n-s)/f+(n<s?6:0):h===n?(s-i)/f+2:(i-n)/f+4,a*=60),p[0]=~~(a+.5),p[1]=~~(100*o+.5),p[2]=~~(100*u+.5)),r&&p.length<4&&(p[3]=1),p},Ae=function(t){var e=[],r=[],i=-1;return t.split(De).forEach((function(t){var n=t.match(rt)||[];e.push.apply(e,n),r.push(i+=n.length+1)})),e.c=r,e},Ce=function(t,e,r){var i,n,s,a,o="",u=(t+o).match(De),h=e?"hsla(":"rgba(",l=0;if(!u)return t;if(u=u.map((function(t){return(t=ke(t,e,1))&&h+(e?t[0]+","+t[1]+"%,"+t[2]+"%,"+t[3]:t.join(","))+")"})),r&&(s=Ae(t),(i=r.c).join(o)!==s.c.join(o)))for(a=(n=t.replace(De,"1").split(rt)).length-1;l<a;l++)o+=n[l]+(~i.indexOf(l)?u.shift()||h+"0,0,0,0)":(s.length?s:u.length?u:r).shift());if(!n)for(a=(n=t.split(De)).length-1;l<a;l++)o+=n[l]+u[l];return o+n[a]},De=function(){var t,e="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(t in Oe)e+="|"+t+"\\b";return new RegExp(e+")","gi")}(),Se=/hsl[a]?\(/,Pe=function(t){var e,r=t.join(" ");if(De.lastIndex=0,De.test(r))return e=Se.test(r),t[1]=Ce(t[1],e),t[0]=Ce(t[0],e,Ae(t[1])),!0},Re=(T=Date.now,w=500,b=33,O=T(),M=O,A=k=1e3/240,D=function t(e){var r,i,n,s,a=T()-M,o=!0===e;if(a>w&&(O+=a-b),((r=(n=(M+=a)-O)-A)>0||o)&&(s=++v.frame,y=n-1e3*v.time,v.time=n/=1e3,A+=r+(r>=k?4:k-r),i=1),o||(_=m(t)),i)for(x=0;x<C.length;x++)C[x](n,y,s,e)},v={time:0,frame:0,tick:function(){D(!0)},deltaRatio:function(t){return y/(1e3/(t||60))},wake:function(){f&&(!h&&Z()&&(u=h=window,l=u.document||{},ot.gsap=xr,(u.gsapVersions||(u.gsapVersions=[])).push(xr.version),ht(ut||u.GreenSockGlobals||!u.gsap&&u||{}),g=u.requestAnimationFrame),_&&v.sleep(),m=g||function(t){return setTimeout(t,A-1e3*v.time+1|0)},d=1,D(2))},sleep:function(){(g?u.cancelAnimationFrame:clearTimeout)(_),d=0,m=pt},lagSmoothing:function(t,e){w=t||1e8,b=Math.min(e,w,0)},fps:function(t){k=1e3/(t||240),A=1e3*v.time+k},add:function(t){C.indexOf(t)<0&&C.push(t),Ee()},remove:function(t){var e;~(e=C.indexOf(t))&&C.splice(e,1)&&x>=e&&x--},_listeners:C=[]}),Ee=function(){return!d&&Re.wake()},ze={},Fe=/^[\d.\-M][\d.\-,\s]/,Be=/["']/g,Ie=function(t){for(var e,r,i,n={},s=t.substr(1,t.length-3).split(":"),a=s[0],o=1,u=s.length;o<u;o++)r=s[o],e=o!==u-1?r.lastIndexOf(","):r.length,i=r.substr(0,e),n[a]=isNaN(i)?i.replace(Be,"").trim():+i,a=r.substr(e+1).trim();return n},Le=function(t){return function(e){return 1-t(1-e)}},Ne=function t(e,r){for(var i,n=e._first;n;)n instanceof We?t(n,r):!n.vars.yoyoEase||n._yoyo&&n._repeat||n._yoyo===r||(n.timeline?t(n.timeline,r):(i=n._ease,n._ease=n._yEase,n._yEase=i,n._yoyo=r)),n=n._next},Ye=function(t,e){return t&&(j(t)?t:ze[t]||function(t){var e,r,i,n,s=(t+"").split("("),a=ze[s[0]];return a&&s.length>1&&a.config?a.config.apply(null,~t.indexOf("{")?[Ie(s[1])]:(e=t,r=e.indexOf("(")+1,i=e.indexOf(")"),n=e.indexOf("(",r),e.substring(r,~n&&n<i?e.indexOf(")",i+1):i)).split(",").map(St)):ze._CE&&Fe.test(t)?ze._CE("",t):a}(t))||e},Ue=function(t,e,r,i){void 0===r&&(r=function(t){return 1-e(1-t)}),void 0===i&&(i=function(t){return t<.5?e(2*t)/2:1-e(2*(1-t))/2});var n,s={easeIn:e,easeOut:r,easeInOut:i};return Mt(t,(function(t){for(var e in ze[t]=ot[t]=s,ze[n=t.toLowerCase()]=r,s)ze[n+("easeIn"===e?".in":"easeOut"===e?".out":".inOut")]=ze[t+"."+e]=s[e]})),s},Xe=function(t){return function(e){return e<.5?(1-t(1-2*e))/2:.5+t(2*(e-.5))/2}},qe=function t(e,r,i){var n=r>=1?r:1,s=(i||(e?.3:.45))/(r<1?r:1),a=s/L*(Math.asin(1/n)||0),o=function(t){return 1===t?1:n*Math.pow(2,-10*t)*q((t-a)*s)+1},u="out"===e?o:"in"===e?function(t){return 1-o(1-t)}:Xe(o);return s=L/s,u.config=function(r,i){return t(e,r,i)},u},Ve=function t(e,r){void 0===r&&(r=1.70158);var i=function(t){return t?--t*t*((r+1)*t+r)+1:0},n="out"===e?i:"in"===e?function(t){return 1-i(1-t)}:Xe(i);return n.config=function(r){return t(e,r)},n};Mt("Linear,Quad,Cubic,Quart,Quint,Strong",(function(t,e){var r=e<5?e+1:e;Ue(t+",Power"+(r-1),e?function(t){return Math.pow(t,r)}:function(t){return t},(function(t){return 1-Math.pow(1-t,r)}),(function(t){return t<.5?Math.pow(2*t,r)/2:1-Math.pow(2*(1-t),r)/2}))})),ze.Linear.easeNone=ze.none=ze.Linear.easeIn,Ue("Elastic",qe("in"),qe("out"),qe()),S=7.5625,R=1/(P=2.75),Ue("Bounce",(function(t){return 1-E(1-t)}),E=function(t){return t<R?S*t*t:t<.7272727272727273?S*Math.pow(t-1.5/P,2)+.75:t<.9090909090909092?S*(t-=2.25/P)*t+.9375:S*Math.pow(t-2.625/P,2)+.984375}),Ue("Expo",(function(t){return t?Math.pow(2,10*(t-1)):0})),Ue("Circ",(function(t){return-(U(1-t*t)-1)})),Ue("Sine",(function(t){return 1===t?1:1-X(t*N)})),Ue("Back",Ve("in"),Ve("out"),Ve()),ze.SteppedEase=ze.steps=ot.SteppedEase={config:function(t,e){void 0===t&&(t=1);var r=1/t,i=t+(e?0:1),n=e?1:0;return function(t){return((i*ae(0,.99999999,t)|0)+n)*r}}},F.ease=ze["quad.out"],Mt("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(t){return Tt+=t+","+t+"Params,"}));var je=function(t,e){this.id=Y++,t._gsap=this,this.target=t,this.harness=e,this.get=e?e.get:Ot,this.set=e?e.getSetter:or},Ge=function(){function t(t){this.vars=t,this._delay=+t.delay||0,(this._repeat=t.repeat===1/0?-2:t.repeat||0)&&(this._rDelay=t.repeatDelay||0,this._yoyo=!!t.yoyo||!!t.yoyoEase),this._ts=1,te(this,+t.duration,1,1),this.data=t.data,d||Re.wake()}var e=t.prototype;return e.delay=function(t){return t||0===t?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+t-this._delay),this._delay=t,this):this._delay},e.duration=function(t){return arguments.length?this.totalDuration(this._repeat>0?t+(t+this._rDelay)*this._repeat:t):this.totalDuration()&&this._dur},e.totalDuration=function(t){return arguments.length?(this._dirty=0,te(this,this._repeat<0?t:(t-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},e.totalTime=function(t,e){if(Ee(),!arguments.length)return this._tTime;var r=this._dp;if(r&&r.smoothChildTiming&&this._ts){for(Wt(this,t),!r._dp||r.parent||Qt(r,this);r.parent;)r.parent._time!==r._start+(r._ts>=0?r._tTime/r._ts:(r.totalDuration()-r._tTime)/-r._ts)&&r.totalTime(r._tTime,!0),r=r.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&t<this._tDur||this._ts<0&&t>0||!this._tDur&&!t)&&Ht(this._dp,this,this._start-this._delay)}return(this._tTime!==t||!this._dur&&!e||this._initted&&Math.abs(this._zTime)===I||!t&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=t),Dt(this,t,e)),this},e.time=function(t,e){return arguments.length?this.totalTime(Math.min(this.totalDuration(),t+qt(this))%(this._dur+this._rDelay)||(t?this._dur:0),e):this._time},e.totalProgress=function(t,e){return arguments.length?this.totalTime(this.totalDuration()*t,e):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},e.progress=function(t,e){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?t:1-t)+qt(this),e):this.duration()?Math.min(1,this._time/this._dur):this.ratio},e.iteration=function(t,e){var r=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(t-1)*r,e):this._repeat?Vt(this._tTime,r)+1:1},e.timeScale=function(t){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===t)return this;var e=this.parent&&this._ts?jt(this.parent._time,this):this._tTime;return this._rts=+t||0,this._ts=this._ps||-1e-8===t?0:this._rts,Ut(this.totalTime(ae(-this._delay,this._tDur,e),!0))},e.paused=function(t){return arguments.length?(this._ps!==t&&(this._ps=t,t?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Ee(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==I&&(this._tTime-=I)))),this):this._ps},e.startTime=function(t){if(arguments.length){this._start=t;var e=this.parent||this._dp;return e&&(e._sort||!this.parent)&&Ht(e,this,t-this._delay),this}return this._start},e.endTime=function(t){return this._start+(H(t)?this.totalDuration():this.duration())/Math.abs(this._ts)},e.rawTime=function(t){var e=this.parent||this._dp;return e?t&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?jt(e.rawTime(t),this):this._tTime:this._tTime},e.globalTime=function(t){for(var e=this,r=arguments.length?t:e.rawTime();e;)r=e._start+r/(e._ts||1),e=e._dp;return r},e.repeat=function(t){return arguments.length?(this._repeat=t===1/0?-2:t,ee(this)):-2===this._repeat?1/0:this._repeat},e.repeatDelay=function(t){if(arguments.length){var e=this._time;return this._rDelay=t,ee(this),e?this.time(e):this}return this._rDelay},e.yoyo=function(t){return arguments.length?(this._yoyo=t,this):this._yoyo},e.seek=function(t,e){return this.totalTime(ie(this,t),H(e))},e.restart=function(t,e){return this.play().totalTime(t?-this._delay:0,H(e))},e.play=function(t,e){return null!=t&&this.seek(t,e),this.reversed(!1).paused(!1)},e.reverse=function(t,e){return null!=t&&this.seek(t||this.totalDuration(),e),this.reversed(!0).paused(!1)},e.pause=function(t,e){return null!=t&&this.seek(t,e),this.paused(!0)},e.resume=function(){return this.paused(!1)},e.reversed=function(t){return arguments.length?(!!t!==this.reversed()&&this.timeScale(-this._rts||(t?-1e-8:0)),this):this._rts<0},e.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},e.isActive=function(){var t,e=this.parent||this._dp,r=this._start;return!(e&&!(this._ts&&this._initted&&e.isActive()&&(t=e.rawTime(!0))>=r&&t<this.endTime(!0)-I))},e.eventCallback=function(t,e,r){var i=this.vars;return arguments.length>1?(e?(i[t]=e,r&&(i[t+"Params"]=r),"onUpdate"===t&&(this._onUpdate=e)):delete i[t],this):i[t]},e.then=function(t){var e=this;return new Promise((function(r){var i=j(t)?t:Pt,n=function(){var t=e.then;e.then=null,j(i)&&(i=i(e))&&(i.then||i===e)&&(e.then=t),r(i),e.then=t};e._initted&&1===e.totalProgress()&&e._ts>=0||!e._tTime&&e._ts<0?n():e._prom=n}))},e.kill=function(){Te(this)},t}();Rt(Ge.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var We=function(t){function e(e,r){var i;return void 0===e&&(e={}),(i=t.call(this,e)||this).labels={},i.smoothChildTiming=!!e.smoothChildTiming,i.autoRemoveChildren=!!e.autoRemoveChildren,i._sort=H(e.sortChildren),o&&Ht(e.parent||o,n(i),r),e.reversed&&i.reverse(),e.paused&&i.paused(!0),e.scrollTrigger&&Zt(n(i),e.scrollTrigger),i}s(e,t);var r=e.prototype;return r.to=function(t,e,r){return ne(0,arguments,this),this},r.from=function(t,e,r){return ne(1,arguments,this),this},r.fromTo=function(t,e,r,i){return ne(2,arguments,this),this},r.set=function(t,e,r){return e.duration=0,e.parent=this,It(e).repeatDelay||(e.repeat=0),e.immediateRender=!!e.immediateRender,new rr(t,e,ie(this,r),1),this},r.call=function(t,e,r){return Ht(this,rr.delayedCall(0,t,e),r)},r.staggerTo=function(t,e,r,i,n,s,a){return r.duration=e,r.stagger=r.stagger||i,r.onComplete=s,r.onCompleteParams=a,r.parent=this,new rr(t,r,ie(this,n)),this},r.staggerFrom=function(t,e,r,i,n,s,a){return r.runBackwards=1,It(r).immediateRender=H(r.immediateRender),this.staggerTo(t,e,r,i,n,s,a)},r.staggerFromTo=function(t,e,r,i,n,s,a,o){return i.startAt=r,It(i).immediateRender=H(i.immediateRender),this.staggerTo(t,e,i,n,s,a,o)},r.render=function(t,e,r){var i,n,s,a,u,h,l,f,c,p,d,_,m=this._time,g=this._dirty?this.totalDuration():this._tDur,v=this._dur,y=this!==o&&t>g-I&&t>=0?g:t<I?0:t,x=this._zTime<0!=t<0&&(this._initted||!v);if(y!==this._tTime||r||x){if(m!==this._time&&v&&(y+=this._time-m,t+=this._time-m),i=y,c=this._start,h=!(f=this._ts),x&&(v||(m=this._zTime),(t||!e)&&(this._zTime=t)),this._repeat){if(d=this._yoyo,u=v+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*u+t,e,r);if(i=kt(y%u),y===g?(a=this._repeat,i=v):((a=~~(y/u))&&a===y/u&&(i=v,a--),i>v&&(i=v)),p=Vt(this._tTime,u),!m&&this._tTime&&p!==a&&(p=a),d&&1&a&&(i=v-i,_=1),a!==p&&!this._lock){var T=d&&1&p,w=T===(d&&1&a);if(a<p&&(T=!T),m=T?0:v,this._lock=1,this.render(m||(_?0:kt(a*u)),e,!v)._lock=0,this._tTime=y,!e&&this.parent&&xe(this,"onRepeat"),this.vars.repeatRefresh&&!_&&(this.invalidate()._lock=1),m&&m!==this._time||h!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(v=this._dur,g=this._tDur,w&&(this._lock=2,m=T?v:-1e-4,this.render(m,!0),this.vars.repeatRefresh&&!_&&this.invalidate()),this._lock=0,!this._ts&&!h)return this;Ne(this,_)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(l=function(t,e,r){var i;if(r>e)for(i=t._first;i&&i._start<=r;){if(!i._dur&&"isPause"===i.data&&i._start>e)return i;i=i._next}else for(i=t._last;i&&i._start>=r;){if(!i._dur&&"isPause"===i.data&&i._start<e)return i;i=i._prev}}(this,kt(m),kt(i)))&&(y-=i-(i=l._start)),this._tTime=y,this._time=i,this._act=!f,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=t,m=0),!m&&i&&!e&&(xe(this,"onStart"),this._tTime!==y))return this;if(i>=m&&t>=0)for(n=this._first;n;){if(s=n._next,(n._act||i>=n._start)&&n._ts&&l!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(n._ts>0?(i-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(i-n._start)*n._ts,e,r),i!==this._time||!this._ts&&!h){l=0,s&&(y+=this._zTime=-1e-8);break}}n=s}else{n=this._last;for(var b=t<0?t:i;n;){if(s=n._prev,(n._act||b<=n._end)&&n._ts&&l!==n){if(n.parent!==this)return this.render(t,e,r);if(n.render(n._ts>0?(b-n._start)*n._ts:(n._dirty?n.totalDuration():n._tDur)+(b-n._start)*n._ts,e,r),i!==this._time||!this._ts&&!h){l=0,s&&(y+=this._zTime=b?-1e-8:I);break}}n=s}}if(l&&!e&&(this.pause(),l.render(i>=m?0:-1e-8)._zTime=i>=m?1:-1,this._ts))return this._start=c,Gt(this),this.render(t,e,r);this._onUpdate&&!e&&xe(this,"onUpdate",!0),(y===g&&g>=this.totalDuration()||!y&&m)&&(c!==this._start&&Math.abs(f)===Math.abs(this._ts)||this._lock||((t||!v)&&(y===g&&this._ts>0||!y&&this._ts<0)&&Nt(this,1),e||t<0&&!m||!y&&!m&&g||(xe(this,y===g&&t>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(y<g&&this.timeScale()>0)&&this._prom())))}return this},r.add=function(t,e){var r=this;if(G(e)||(e=ie(this,e,t)),!(t instanceof Ge)){if(K(t))return t.forEach((function(t){return r.add(t,e)})),this;if(V(t))return this.addLabel(t,e);if(!j(t))return this;t=rr.delayedCall(0,t)}return this!==t?Ht(this,t,e):this},r.getChildren=function(t,e,r,i){void 0===t&&(t=!0),void 0===e&&(e=!0),void 0===r&&(r=!0),void 0===i&&(i=-B);for(var n=[],s=this._first;s;)s._start>=i&&(s instanceof rr?e&&n.push(s):(r&&n.push(s),t&&n.push.apply(n,s.getChildren(!0,e,r)))),s=s._next;return n},r.getById=function(t){for(var e=this.getChildren(1,1,1),r=e.length;r--;)if(e[r].vars.id===t)return e[r]},r.remove=function(t){return V(t)?this.removeLabel(t):j(t)?this.killTweensOf(t):(Lt(this,t),t===this._recent&&(this._recent=this._last),Yt(this))},r.totalTime=function(e,r){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=kt(Re.time-(this._ts>0?e/this._ts:(this.totalDuration()-e)/-this._ts))),t.prototype.totalTime.call(this,e,r),this._forcing=0,this):this._tTime},r.addLabel=function(t,e){return this.labels[t]=ie(this,e),this},r.removeLabel=function(t){return delete this.labels[t],this},r.addPause=function(t,e,r){var i=rr.delayedCall(0,e||pt,r);return i.data="isPause",this._hasPause=1,Ht(this,i,ie(this,t))},r.removePause=function(t){var e=this._first;for(t=ie(this,t);e;)e._start===t&&"isPause"===e.data&&Nt(e),e=e._next},r.killTweensOf=function(t,e,r){for(var i=this.getTweensOf(t,r),n=i.length;n--;)Qe!==i[n]&&i[n].kill(t,e);return this},r.getTweensOf=function(t,e){for(var r,i=[],n=le(t),s=this._first,a=G(e);s;)s instanceof rr?At(s._targets,n)&&(a?(!Qe||s._initted&&s._ts)&&s.globalTime(0)<=e&&s.globalTime(s.totalDuration())>e:!e||s.isActive())&&i.push(s):(r=s.getTweensOf(n,e)).length&&i.push.apply(i,r),s=s._next;return i},r.tweenTo=function(t,e){e=e||{};var r,i=this,n=ie(i,t),s=e,a=s.startAt,o=s.onStart,u=s.onStartParams,h=s.immediateRender,l=rr.to(i,Rt({ease:e.ease||"none",lazy:!1,immediateRender:!1,time:n,overwrite:"auto",duration:e.duration||Math.abs((n-(a&&"time"in a?a.time:i._time))/i.timeScale())||I,onStart:function(){if(i.pause(),!r){var t=e.duration||Math.abs((n-(a&&"time"in a?a.time:i._time))/i.timeScale());l._dur!==t&&te(l,t,0,1).render(l._time,!0,!0),r=1}o&&o.apply(l,u||[])}},e));return h?l.render(0):l},r.tweenFromTo=function(t,e,r){return this.tweenTo(e,Rt({startAt:{time:ie(this,t)}},r))},r.recent=function(){return this._recent},r.nextLabel=function(t){return void 0===t&&(t=this._time),ye(this,ie(this,t))},r.previousLabel=function(t){return void 0===t&&(t=this._time),ye(this,ie(this,t),1)},r.currentLabel=function(t){return arguments.length?this.seek(t,!0):this.previousLabel(this._time+I)},r.shiftChildren=function(t,e,r){void 0===r&&(r=0);for(var i,n=this._first,s=this.labels;n;)n._start>=r&&(n._start+=t,n._end+=t),n=n._next;if(e)for(i in s)s[i]>=r&&(s[i]+=t);return Yt(this)},r.invalidate=function(){var e=this._first;for(this._lock=0;e;)e.invalidate(),e=e._next;return t.prototype.invalidate.call(this)},r.clear=function(t){void 0===t&&(t=!0);for(var e,r=this._first;r;)e=r._next,this.remove(r),r=e;return this._dp&&(this._time=this._tTime=this._pTime=0),t&&(this.labels={}),Yt(this)},r.totalDuration=function(t){var e,r,i,n=0,s=this,a=s._last,u=B;if(arguments.length)return s.timeScale((s._repeat<0?s.duration():s.totalDuration())/(s.reversed()?-t:t));if(s._dirty){for(i=s.parent;a;)e=a._prev,a._dirty&&a.totalDuration(),(r=a._start)>u&&s._sort&&a._ts&&!s._lock?(s._lock=1,Ht(s,a,r-a._delay,1)._lock=0):u=r,r<0&&a._ts&&(n-=r,(!i&&!s._dp||i&&i.smoothChildTiming)&&(s._start+=r/s._ts,s._time-=r,s._tTime-=r),s.shiftChildren(-r,!1,-Infinity),u=0),a._end>n&&a._ts&&(n=a._end),a=e;te(s,s===o&&s._time>n?s._time:n,1,1),s._dirty=0}return s._tDur},e.updateRoot=function(t){if(o._ts&&(Dt(o,jt(t,o)),c=Re.frame),Re.frame>=yt){yt+=z.autoSleep||120;var e=o._first;if((!e||!e._ts)&&z.autoSleep&&Re._listeners.length<2){for(;e&&!e._ts;)e=e._next;e||Re.sleep()}}},e}(Ge);Rt(We.prototype,{_lock:0,_hasPause:0,_forcing:0});var Qe,He=function(t,e,r,i,n,s,a){var o,u,h,l,f,c,p,d,_=new mr(this._pt,t,e,0,1,lr,null,n),m=0,g=0;for(_.b=r,_.e=i,r+="",(p=~(i+="").indexOf("random("))&&(i=ge(i)),s&&(s(d=[r,i],t,e),r=d[0],i=d[1]),u=r.match(it)||[];o=it.exec(i);)l=o[0],f=i.substring(m,o.index),h?h=(h+1)%5:"rgba("===f.substr(-5)&&(h=1),l!==u[g++]&&(c=parseFloat(u[g-1])||0,_._pt={_next:_._pt,p:f||1===g?f:",",s:c,c:"="===l.charAt(1)?parseFloat(l.substr(2))*("-"===l.charAt(0)?-1:1):parseFloat(l)-c,m:h&&h<4?Math.round:0},m=it.lastIndex);return _.c=m<i.length?i.substring(m,i.length):"",_.fp=a,(nt.test(i)||p)&&(_.e=0),this._pt=_,_},Ze=function(t,e,r,i,n,s,a,o,u){j(i)&&(i=i(n||0,t,s));var h,l=t[e],f="get"!==r?r:j(l)?u?t[e.indexOf("set")||!j(t["get"+e.substr(3)])?e:"get"+e.substr(3)](u):t[e]():l,c=j(l)?u?sr:nr:ir;if(V(i)&&(~i.indexOf("random(")&&(i=ge(i)),"="===i.charAt(1)&&((h=parseFloat(f)+parseFloat(i.substr(2))*("-"===i.charAt(0)?-1:1)+(oe(f)||0))||0===h)&&(i=h)),f!==i)return isNaN(f*i)||""===i?(!l&&!(e in t)&&lt(e,i),He.call(this,t,e,f,i,c,o||z.stringFilter,u)):(h=new mr(this._pt,t,e,+f||0,i-(f||0),"boolean"==typeof l?hr:ur,0,c),u&&(h.fp=u),a&&h.modifier(a,this,t),this._pt=h)},$e=function(t,e,r,i,n,s){var a,o,u,h;if(gt[t]&&!1!==(a=new gt[t]).init(n,a.rawVars?e[t]:function(t,e,r,i,n){if(j(t)&&(t=Ke(t,n,e,r,i)),!Q(t)||t.style&&t.nodeType||K(t)||J(t))return V(t)?Ke(t,n,e,r,i):t;var s,a={};for(s in t)a[s]=Ke(t[s],n,e,r,i);return a}(e[t],i,n,s,r),r,i,s)&&(r._pt=o=new mr(r._pt,n,t,0,1,a.render,a,0,a.priority),r!==p))for(u=r._ptLookup[r._targets.indexOf(n)],h=a._props.length;h--;)u[a._props[h]]=o;return a},Je=function t(e,r){var i,n,s,u,h,l,f,c,p,d,_,m,g,v=e.vars,y=v.ease,x=v.startAt,T=v.immediateRender,w=v.lazy,b=v.onUpdate,O=v.onUpdateParams,M=v.callbackScope,k=v.runBackwards,A=v.yoyoEase,C=v.keyframes,D=v.autoRevert,S=e._dur,P=e._startAt,R=e._targets,E=e.parent,z=E&&"nested"===E.data?E.parent._targets:R,B="auto"===e._overwrite&&!a,L=e.timeline;if(L&&(!C||!y)&&(y="none"),e._ease=Ye(y,F.ease),e._yEase=A?Le(Ye(!0===A?y:A,F.ease)):0,A&&e._yoyo&&!e._repeat&&(A=e._yEase,e._yEase=e._ease,e._ease=A),e._from=!L&&!!v.runBackwards,!L){if(m=(c=R[0]?bt(R[0]).harness:0)&&v[c.prop],i=Bt(v,dt),P&&P.render(-1,!0).kill(),x)if(Nt(e._startAt=rr.set(R,Rt({data:"isStart",overwrite:!1,parent:E,immediateRender:!0,lazy:H(w),startAt:null,delay:0,onUpdate:b,onUpdateParams:O,callbackScope:M,stagger:0},x))),r<0&&!T&&!D&&e._startAt.render(-1,!0),T){if(r>0&&!D&&(e._startAt=0),S&&r<=0)return void(r&&(e._zTime=r))}else!1===D&&(e._startAt=0);else if(k&&S)if(P)!D&&(e._startAt=0);else if(r&&(T=!1),s=Rt({overwrite:!1,data:"isFromStart",lazy:T&&H(w),immediateRender:T,stagger:0,parent:E},i),m&&(s[c.prop]=m),Nt(e._startAt=rr.set(R,s)),r<0&&e._startAt.render(-1,!0),T){if(!r)return}else t(e._startAt,I);for(e._pt=0,w=S&&H(w)||w&&!S,n=0;n<R.length;n++){if(f=(h=R[n])._gsap||wt(R)[n]._gsap,e._ptLookup[n]=d={},mt[f.id]&&_t.length&&Ct(),_=z===R?n:z.indexOf(h),c&&!1!==(p=new c).init(h,m||i,e,_,z)&&(e._pt=u=new mr(e._pt,h,p.name,0,1,p.render,p,0,p.priority),p._props.forEach((function(t){d[t]=u})),p.priority&&(l=1)),!c||m)for(s in i)gt[s]&&(p=$e(s,i,e,_,h,z))?p.priority&&(l=1):d[s]=u=Ze.call(e,h,s,"get",i[s],_,z,0,v.stringFilter);e._op&&e._op[n]&&e.kill(h,e._op[n]),B&&e._pt&&(Qe=e,o.killTweensOf(h,d,e.globalTime(0)),g=!e.parent,Qe=0),e._pt&&w&&(mt[f.id]=1)}l&&_r(e),e._onInit&&e._onInit(e)}e._onUpdate=b,e._initted=(!e._op||e._pt)&&!g},Ke=function(t,e,r,i,n){return j(t)?t.call(e,r,i,n):V(t)&&~t.indexOf("random(")?ge(t):t},tr=Tt+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase",er=(tr+",id,stagger,delay,duration,paused,scrollTrigger").split(","),rr=function(t){function e(e,r,i,s){var u;"number"==typeof r&&(i.duration=r,r=i,i=null);var h,l,f,c,p,d,_,m,g=(u=t.call(this,s?r:It(r))||this).vars,v=g.duration,y=g.delay,x=g.immediateRender,T=g.stagger,w=g.overwrite,b=g.keyframes,O=g.defaults,M=g.scrollTrigger,k=g.yoyoEase,A=r.parent||o,C=(K(e)||J(e)?G(e[0]):"length"in r)?[e]:le(e);if(u._targets=C.length?wt(C):ft("GSAP target "+e+" not found. https://greensock.com",!z.nullTargetWarn)||[],u._ptLookup=[],u._overwrite=w,b||T||$(v)||$(y)){if(r=u.vars,(h=u.timeline=new We({data:"nested",defaults:O||{}})).kill(),h.parent=h._dp=n(u),h._start=0,b)Rt(h.vars.defaults,{ease:"none"}),T?C.forEach((function(t,e){return b.forEach((function(r,i){return h.to(t,r,i?">":e*T)}))})):b.forEach((function(t){return h.to(C,t,">")}));else{if(c=C.length,_=T?ce(T):pt,Q(T))for(p in T)~tr.indexOf(p)&&(m||(m={}),m[p]=T[p]);for(l=0;l<c;l++){for(p in f={},r)er.indexOf(p)<0&&(f[p]=r[p]);f.stagger=0,k&&(f.yoyoEase=k),m&&zt(f,m),d=C[l],f.duration=+Ke(v,n(u),l,d,C),f.delay=(+Ke(y,n(u),l,d,C)||0)-u._delay,!T&&1===c&&f.delay&&(u._delay=y=f.delay,u._start+=y,f.delay=0),h.to(d,f,_(l,d,C))}h.duration()?v=y=0:u.timeline=0}v||u.duration(v=h.duration())}else u.timeline=0;return!0!==w||a||(Qe=n(u),o.killTweensOf(C),Qe=0),Ht(A,n(u),i),r.reversed&&u.reverse(),r.paused&&u.paused(!0),(x||!v&&!b&&u._start===kt(A._time)&&H(x)&&Xt(n(u))&&"nested"!==A.data)&&(u._tTime=-1e-8,u.render(Math.max(0,-y))),M&&Zt(n(u),M),u}s(e,t);var r=e.prototype;return r.render=function(t,e,r){var i,n,s,a,o,u,h,l,f,c=this._time,p=this._tDur,d=this._dur,_=t>p-I&&t>=0?p:t<I?0:t;if(d){if(_!==this._tTime||!t||r||!this._initted&&this._tTime||this._startAt&&this._zTime<0!=t<0){if(i=_,l=this.timeline,this._repeat){if(a=d+this._rDelay,this._repeat<-1&&t<0)return this.totalTime(100*a+t,e,r);if(i=kt(_%a),_===p?(s=this._repeat,i=d):((s=~~(_/a))&&s===_/a&&(i=d,s--),i>d&&(i=d)),(u=this._yoyo&&1&s)&&(f=this._yEase,i=d-i),o=Vt(this._tTime,a),i===c&&!r&&this._initted)return this;s!==o&&(l&&this._yEase&&Ne(l,u),!this.vars.repeatRefresh||u||this._lock||(this._lock=r=1,this.render(kt(a*s),!0).invalidate()._lock=0))}if(!this._initted){if($t(this,t<0?t:i,r,e))return this._tTime=0,this;if(d!==this._dur)return this.render(t,e,r)}if(this._tTime=_,this._time=i,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=h=(f||this._ease)(i/d),this._from&&(this.ratio=h=1-h),i&&!c&&!e&&(xe(this,"onStart"),this._tTime!==_))return this;for(n=this._pt;n;)n.r(h,n.d),n=n._next;l&&l.render(t<0?t:!i&&u?-1e-8:l._dur*h,e,r)||this._startAt&&(this._zTime=t),this._onUpdate&&!e&&(t<0&&this._startAt&&this._startAt.render(t,!0,r),xe(this,"onUpdate")),this._repeat&&s!==o&&this.vars.onRepeat&&!e&&this.parent&&xe(this,"onRepeat"),_!==this._tDur&&_||this._tTime!==_||(t<0&&this._startAt&&!this._onUpdate&&this._startAt.render(t,!0,!0),(t||!d)&&(_===this._tDur&&this._ts>0||!_&&this._ts<0)&&Nt(this,1),e||t<0&&!c||!_&&!c||(xe(this,_===p?"onComplete":"onReverseComplete",!0),this._prom&&!(_<p&&this.timeScale()>0)&&this._prom()))}}else!function(t,e,r,i){var n,s,a,o=t.ratio,u=e<0||!e&&(!t._start&&Jt(t)&&(t._initted||!Kt(t))||(t._ts<0||t._dp._ts<0)&&!Kt(t))?0:1,h=t._rDelay,l=0;if(h&&t._repeat&&(l=ae(0,t._tDur,e),s=Vt(l,h),a=Vt(t._tTime,h),t._yoyo&&1&s&&(u=1-u),s!==a&&(o=1-u,t.vars.repeatRefresh&&t._initted&&t.invalidate())),u!==o||i||t._zTime===I||!e&&t._zTime){if(!t._initted&&$t(t,e,i,r))return;for(a=t._zTime,t._zTime=e||(r?I:0),r||(r=e&&!a),t.ratio=u,t._from&&(u=1-u),t._time=0,t._tTime=l,n=t._pt;n;)n.r(u,n.d),n=n._next;t._startAt&&e<0&&t._startAt.render(e,!0,!0),t._onUpdate&&!r&&xe(t,"onUpdate"),l&&t._repeat&&!r&&t.parent&&xe(t,"onRepeat"),(e>=t._tDur||e<0)&&t.ratio===u&&(u&&Nt(t,1),r||(xe(t,u?"onComplete":"onReverseComplete",!0),t._prom&&t._prom()))}else t._zTime||(t._zTime=e)}(this,t,e,r);return this},r.targets=function(){return this._targets},r.invalidate=function(){return this._pt=this._op=this._startAt=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(),t.prototype.invalidate.call(this)},r.kill=function(t,e){if(void 0===e&&(e="all"),!(t||e&&"all"!==e))return this._lazy=this._pt=0,this.parent?Te(this):this;if(this.timeline){var r=this.timeline.totalDuration();return this.timeline.killTweensOf(t,e,Qe&&!0!==Qe.vars.overwrite)._first||Te(this),this.parent&&r!==this.timeline.totalDuration()&&te(this,this._dur*this.timeline._tDur/r,0,1),this}var i,n,s,a,o,u,h,l=this._targets,f=t?le(t):l,c=this._ptLookup,p=this._pt;if((!e||"all"===e)&&function(t,e){for(var r=t.length,i=r===e.length;i&&r--&&t[r]===e[r];);return r<0}(l,f))return"all"===e&&(this._pt=0),Te(this);for(i=this._op=this._op||[],"all"!==e&&(V(e)&&(o={},Mt(e,(function(t){return o[t]=1})),e=o),e=function(t,e){var r,i,n,s,a=t[0]?bt(t[0]).harness:0,o=a&&a.aliases;if(!o)return e;for(i in r=zt({},e),o)if(i in r)for(n=(s=o[i].split(",")).length;n--;)r[s[n]]=r[i];return r}(l,e)),h=l.length;h--;)if(~f.indexOf(l[h]))for(o in n=c[h],"all"===e?(i[h]=e,a=n,s={}):(s=i[h]=i[h]||{},a=e),a)(u=n&&n[o])&&("kill"in u.d&&!0!==u.d.kill(o)||Lt(this,u,"_pt"),delete n[o]),"all"!==s&&(s[o]=1);return this._initted&&!this._pt&&p&&Te(this),this},e.to=function(t,r){return new e(t,r,arguments[2])},e.from=function(t,e){return ne(1,arguments)},e.delayedCall=function(t,r,i,n){return new e(r,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:t,onComplete:r,onReverseComplete:r,onCompleteParams:i,onReverseCompleteParams:i,callbackScope:n})},e.fromTo=function(t,e,r){return ne(2,arguments)},e.set=function(t,r){return r.duration=0,r.repeatDelay||(r.repeat=0),new e(t,r)},e.killTweensOf=function(t,e,r){return o.killTweensOf(t,e,r)},e}(Ge);Rt(rr.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),Mt("staggerTo,staggerFrom,staggerFromTo",(function(t){rr[t]=function(){var e=new We,r=ue.call(arguments,0);return r.splice("staggerFromTo"===t?5:4,0,0),e[t].apply(e,r)}}));var ir=function(t,e,r){return t[e]=r},nr=function(t,e,r){return t[e](r)},sr=function(t,e,r,i){return t[e](i.fp,r)},ar=function(t,e,r){return t.setAttribute(e,r)},or=function(t,e){return j(t[e])?nr:W(t[e])&&t.setAttribute?ar:ir},ur=function(t,e){return e.set(e.t,e.p,Math.round(1e6*(e.s+e.c*t))/1e6,e)},hr=function(t,e){return e.set(e.t,e.p,!!(e.s+e.c*t),e)},lr=function(t,e){var r=e._pt,i="";if(!t&&e.b)i=e.b;else if(1===t&&e.e)i=e.e;else{for(;r;)i=r.p+(r.m?r.m(r.s+r.c*t):Math.round(1e4*(r.s+r.c*t))/1e4)+i,r=r._next;i+=e.c}e.set(e.t,e.p,i,e)},fr=function(t,e){for(var r=e._pt;r;)r.r(t,r.d),r=r._next},cr=function(t,e,r,i){for(var n,s=this._pt;s;)n=s._next,s.p===i&&s.modifier(t,e,r),s=n},pr=function(t){for(var e,r,i=this._pt;i;)r=i._next,i.p===t&&!i.op||i.op===t?Lt(this,i,"_pt"):i.dep||(e=1),i=r;return!e},dr=function(t,e,r,i){i.mSet(t,e,i.m.call(i.tween,r,i.mt),i)},_r=function(t){for(var e,r,i,n,s=t._pt;s;){for(e=s._next,r=i;r&&r.pr>s.pr;)r=r._next;(s._prev=r?r._prev:n)?s._prev._next=s:i=s,(s._next=r)?r._prev=s:n=s,s=e}t._pt=i},mr=function(){function t(t,e,r,i,n,s,a,o,u){this.t=e,this.s=i,this.c=n,this.p=r,this.r=s||ur,this.d=a||this,this.set=o||ir,this.pr=u||0,this._next=t,t&&(t._prev=this)}return t.prototype.modifier=function(t,e,r){this.mSet=this.mSet||this.set,this.set=dr,this.m=t,this.mt=r,this.tween=e},t}();Mt(Tt+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(t){return dt[t]=1})),ot.TweenMax=ot.TweenLite=rr,ot.TimelineLite=ot.TimelineMax=We,o=new We({sortChildren:!1,defaults:F,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),z.stringFilter=Pe;var gr={registerPlugin:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];e.forEach((function(t){return we(t)}))},timeline:function(t){return new We(t)},getTweensOf:function(t,e){return o.getTweensOf(t,e)},getProperty:function(t,e,r,i){V(t)&&(t=le(t)[0]);var n=bt(t||{}).get,s=r?Pt:St;return"native"===r&&(r=""),t?e?s((gt[e]&&gt[e].get||n)(t,e,r,i)):function(e,r,i){return s((gt[e]&&gt[e].get||n)(t,e,r,i))}:t},quickSetter:function(t,e,r){if((t=le(t)).length>1){var i=t.map((function(t){return xr.quickSetter(t,e,r)})),n=i.length;return function(t){for(var e=n;e--;)i[e](t)}}t=t[0]||{};var s=gt[e],a=bt(t),o=a.harness&&(a.harness.aliases||{})[e]||e,u=s?function(e){var i=new s;p._pt=0,i.init(t,r?e+r:e,p,0,[t]),i.render(1,i),p._pt&&fr(1,p)}:a.set(t,o);return s?u:function(e){return u(t,o,r?e+r:e,a,1)}},isTweening:function(t){return o.getTweensOf(t,!0).length>0},defaults:function(t){return t&&t.ease&&(t.ease=Ye(t.ease,F.ease)),Ft(F,t||{})},config:function(t){return Ft(z,t||{})},registerEffect:function(t){var e=t.name,r=t.effect,i=t.plugins,n=t.defaults,s=t.extendTimeline;(i||"").split(",").forEach((function(t){return t&&!gt[t]&&!ot[t]&&ft(e+" effect requires "+t+" plugin.")})),vt[e]=function(t,e,i){return r(le(t),Rt(e||{},n),i)},s&&(We.prototype[e]=function(t,r,i){return this.add(vt[e](t,Q(r)?r:(i=r)&&{},this),i)})},registerEase:function(t,e){ze[t]=Ye(e)},parseEase:function(t,e){return arguments.length?Ye(t,e):ze},getById:function(t){return o.getById(t)},exportRoot:function(t,e){void 0===t&&(t={});var r,i,n=new We(t);for(n.smoothChildTiming=H(t.smoothChildTiming),o.remove(n),n._dp=0,n._time=n._tTime=o._time,r=o._first;r;)i=r._next,!e&&!r._dur&&r instanceof rr&&r.vars.onComplete===r._targets[0]||Ht(n,r,r._start-r._delay),r=i;return Ht(o,n,0),n},utils:{wrap:function t(e,r,i){var n=r-e;return K(e)?me(e,t(0,e.length),r):se(i,(function(t){return(n+(t-e)%n)%n+e}))},wrapYoyo:function t(e,r,i){var n=r-e,s=2*n;return K(e)?me(e,t(0,e.length-1),r):se(i,(function(t){return e+((t=(s+(t-e)%s)%s||0)>n?s-t:t)}))},distribute:ce,random:_e,snap:de,normalize:function(t,e,r){return ve(t,e,0,1,r)},getUnit:oe,clamp:function(t,e,r){return se(r,(function(r){return ae(t,e,r)}))},splitColor:ke,toArray:le,selector:function(t){return t=le(t)[0]||ft("Invalid scope")||{},function(e){var r=t.current||t.nativeElement||t;return le(e,r.querySelectorAll?r:r===t?ft("Invalid scope")||l.createElement("div"):t)}},mapRange:ve,pipe:function(){for(var t=arguments.length,e=new Array(t),r=0;r<t;r++)e[r]=arguments[r];return function(t){return e.reduce((function(t,e){return e(t)}),t)}},unitize:function(t,e){return function(r){return t(parseFloat(r))+(e||oe(r))}},interpolate:function t(e,r,i,n){var s=isNaN(e+r)?0:function(t){return(1-t)*e+t*r};if(!s){var a,o,u,h,l,f=V(e),c={};if(!0===i&&(n=1)&&(i=null),f)e={p:e},r={p:r};else if(K(e)&&!K(r)){for(u=[],h=e.length,l=h-2,o=1;o<h;o++)u.push(t(e[o-1],e[o]));h--,s=function(t){t*=h;var e=Math.min(l,~~t);return u[e](t-e)},i=r}else n||(e=zt(K(e)?[]:{},e));if(!u){for(a in r)Ze.call(c,e,a,"get",r[a]);s=function(t){return fr(t,c)||(f?e.p:e)}}}return se(i,s)},shuffle:fe},install:ht,effects:vt,ticker:Re,updateRoot:We.updateRoot,plugins:gt,globalTimeline:o,core:{PropTween:mr,globals:ct,Tween:rr,Timeline:We,Animation:Ge,getCache:bt,_removeLinkedListItem:Lt,suppressOverwrites:function(t){return a=t}}};Mt("to,from,fromTo,delayedCall,set,killTweensOf",(function(t){return gr[t]=rr[t]})),Re.add(We.updateRoot),p=gr.to({},{duration:0});var vr=function(t,e){for(var r=t._pt;r&&r.p!==e&&r.op!==e&&r.fp!==e;)r=r._next;return r},yr=function(t,e){return{name:t,rawVars:1,init:function(t,r,i){i._onInit=function(t){var i,n;if(V(r)&&(i={},Mt(r,(function(t){return i[t]=1})),r=i),e){for(n in i={},r)i[n]=e(r[n]);r=i}!function(t,e){var r,i,n,s=t._targets;for(r in e)for(i=s.length;i--;)(n=t._ptLookup[i][r])&&(n=n.d)&&(n._pt&&(n=vr(n,r)),n&&n.modifier&&n.modifier(e[r],t,s[i],r))}(t,r)}}}},xr=gr.registerPlugin({name:"attr",init:function(t,e,r,i,n){var s,a;for(s in e)(a=this.add(t,"setAttribute",(t.getAttribute(s)||0)+"",e[s],i,n,0,0,s))&&(a.op=s),this._props.push(s)}},{name:"endArray",init:function(t,e){for(var r=e.length;r--;)this.add(t,r,t[r]||0,e[r])}},yr("roundProps",pe),yr("modifiers"),yr("snap",de))||gr;rr.version=We.version=xr.version="3.7.1",f=1,Z()&&Ee(),ze.Power0,ze.Power1,ze.Power2,ze.Power3,ze.Power4,ze.Linear,ze.Quad,ze.Cubic,ze.Quart,ze.Quint,ze.Strong,ze.Elastic,ze.Back,ze.SteppedEase,ze.Bounce,ze.Sine,ze.Expo,ze.Circ;var Tr,wr,br,Or,Mr,kr,Ar,Cr={},Dr=180/Math.PI,Sr=Math.PI/180,Pr=Math.atan2,Rr=/([A-Z])/g,Er=/(?:left|right|width|margin|padding|x)/i,zr=/[\s,\(]\S/,Fr={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},Br=function(t,e){return e.set(e.t,e.p,Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Ir=function(t,e){return e.set(e.t,e.p,1===t?e.e:Math.round(1e4*(e.s+e.c*t))/1e4+e.u,e)},Lr=function(t,e){return e.set(e.t,e.p,t?Math.round(1e4*(e.s+e.c*t))/1e4+e.u:e.b,e)},Nr=function(t,e){var r=e.s+e.c*t;e.set(e.t,e.p,~~(r+(r<0?-.5:.5))+e.u,e)},Yr=function(t,e){return e.set(e.t,e.p,t?e.e:e.b,e)},Ur=function(t,e){return e.set(e.t,e.p,1!==t?e.b:e.e,e)},Xr=function(t,e,r){return t.style[e]=r},qr=function(t,e,r){return t.style.setProperty(e,r)},Vr=function(t,e,r){return t._gsap[e]=r},jr=function(t,e,r){return t._gsap.scaleX=t._gsap.scaleY=r},Gr=function(t,e,r,i,n){var s=t._gsap;s.scaleX=s.scaleY=r,s.renderTransform(n,s)},Wr=function(t,e,r,i,n){var s=t._gsap;s[e]=r,s.renderTransform(n,s)},Qr="transform",Hr=Qr+"Origin",Zr=function(t,e){var r=wr.createElementNS?wr.createElementNS((e||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),t):wr.createElement(t);return r.style?r:wr.createElement(t)},$r=function t(e,r,i){var n=getComputedStyle(e);return n[r]||n.getPropertyValue(r.replace(Rr,"-$1").toLowerCase())||n.getPropertyValue(r)||!i&&t(e,Kr(r)||r,1)||""},Jr="O,Moz,ms,Ms,Webkit".split(","),Kr=function(t,e,r){var i=(e||Mr).style,n=5;if(t in i&&!r)return t;for(t=t.charAt(0).toUpperCase()+t.substr(1);n--&&!(Jr[n]+t in i););return n<0?null:(3===n?"ms":n>=0?Jr[n]:"")+t},ti=function(){"undefined"!=typeof window&&window.document&&(Tr=window,wr=Tr.document,br=wr.documentElement,Mr=Zr("div")||{style:{}},Zr("div"),Qr=Kr(Qr),Hr=Qr+"Origin",Mr.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",Ar=!!Kr("perspective"),Or=1)},ei=function t(e){var r,i=Zr("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),n=this.parentNode,s=this.nextSibling,a=this.style.cssText;if(br.appendChild(i),i.appendChild(this),this.style.display="block",e)try{r=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=t}catch(t){}else this._gsapBBox&&(r=this._gsapBBox());return n&&(s?n.insertBefore(this,s):n.appendChild(this)),br.removeChild(i),this.style.cssText=a,r},ri=function(t,e){for(var r=e.length;r--;)if(t.hasAttribute(e[r]))return t.getAttribute(e[r])},ii=function(t){var e;try{e=t.getBBox()}catch(r){e=ei.call(t,!0)}return e&&(e.width||e.height)||t.getBBox===ei||(e=ei.call(t,!0)),!e||e.width||e.x||e.y?e:{x:+ri(t,["x","cx","x1"])||0,y:+ri(t,["y","cy","y1"])||0,width:0,height:0}},ni=function(t){return!(!t.getCTM||t.parentNode&&!t.ownerSVGElement||!ii(t))},si=function(t,e){if(e){var r=t.style;e in Cr&&e!==Hr&&(e=Qr),r.removeProperty?("ms"!==e.substr(0,2)&&"webkit"!==e.substr(0,6)||(e="-"+e),r.removeProperty(e.replace(Rr,"-$1").toLowerCase())):r.removeAttribute(e)}},ai=function(t,e,r,i,n,s){var a=new mr(t._pt,e,r,0,1,s?Ur:Yr);return t._pt=a,a.b=i,a.e=n,t._props.push(r),a},oi={deg:1,rad:1,turn:1},ui=function t(e,r,i,n){var s,a,o,u,h=parseFloat(i)||0,l=(i+"").trim().substr((h+"").length)||"px",f=Mr.style,c=Er.test(r),p="svg"===e.tagName.toLowerCase(),d=(p?"client":"offset")+(c?"Width":"Height"),_=100,m="px"===n,g="%"===n;return n===l||!h||oi[n]||oi[l]?h:("px"!==l&&!m&&(h=t(e,r,i,"px")),u=e.getCTM&&ni(e),!g&&"%"!==l||!Cr[r]&&!~r.indexOf("adius")?(f[c?"width":"height"]=_+(m?l:n),a=~r.indexOf("adius")||"em"===n&&e.appendChild&&!p?e:e.parentNode,u&&(a=(e.ownerSVGElement||{}).parentNode),a&&a!==wr&&a.appendChild||(a=wr.body),(o=a._gsap)&&g&&o.width&&c&&o.time===Re.time?kt(h/o.width*_):((g||"%"===l)&&(f.position=$r(e,"position")),a===e&&(f.position="static"),a.appendChild(Mr),s=Mr[d],a.removeChild(Mr),f.position="absolute",c&&g&&((o=bt(a)).time=Re.time,o.width=a[d]),kt(m?s*h/_:s&&h?_/s*h:0))):(s=u?e.getBBox()[c?"width":"height"]:e[d],kt(g?h/s*_:h/100*s)))},hi=function(t,e,r,i){var n;return Or||ti(),e in Fr&&"transform"!==e&&~(e=Fr[e]).indexOf(",")&&(e=e.split(",")[0]),Cr[e]&&"transform"!==e?(n=xi(t,i),n="transformOrigin"!==e?n[e]:n.svg?n.origin:Ti($r(t,Hr))+" "+n.zOrigin+"px"):(!(n=t.style[e])||"auto"===n||i||~(n+"").indexOf("calc("))&&(n=pi[e]&&pi[e](t,e,r)||$r(t,e)||Ot(t,e)||("opacity"===e?1:0)),r&&!~(n+"").trim().indexOf(" ")?ui(t,e,n,r)+r:n},li=function(t,e,r,i){if(!r||"none"===r){var n=Kr(e,t,1),s=n&&$r(t,n,1);s&&s!==r?(e=n,r=s):"borderColor"===e&&(r=$r(t,"borderTopColor"))}var a,o,u,h,l,f,c,p,d,_,m,g,v=new mr(this._pt,t.style,e,0,1,lr),y=0,x=0;if(v.b=r,v.e=i,r+="","auto"==(i+="")&&(t.style[e]=i,i=$r(t,e)||i,t.style[e]=r),Pe(a=[r,i]),i=a[1],u=(r=a[0]).match(rt)||[],(i.match(rt)||[]).length){for(;o=rt.exec(i);)c=o[0],d=i.substring(y,o.index),l?l=(l+1)%5:"rgba("!==d.substr(-5)&&"hsla("!==d.substr(-5)||(l=1),c!==(f=u[x++]||"")&&(h=parseFloat(f)||0,m=f.substr((h+"").length),(g="="===c.charAt(1)?+(c.charAt(0)+"1"):0)&&(c=c.substr(2)),p=parseFloat(c),_=c.substr((p+"").length),y=rt.lastIndex-_.length,_||(_=_||z.units[e]||m,y===i.length&&(i+=_,v.e+=_)),m!==_&&(h=ui(t,e,f,_)||0),v._pt={_next:v._pt,p:d||1===x?d:",",s:h,c:g?g*p:p-h,m:l&&l<4||"zIndex"===e?Math.round:0});v.c=y<i.length?i.substring(y,i.length):""}else v.r="display"===e&&"none"===i?Ur:Yr;return nt.test(i)&&(v.e=0),this._pt=v,v},fi={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},ci=function(t,e){if(e.tween&&e.tween._time===e.tween._dur){var r,i,n,s=e.t,a=s.style,o=e.u,u=s._gsap;if("all"===o||!0===o)a.cssText="",i=1;else for(n=(o=o.split(",")).length;--n>-1;)r=o[n],Cr[r]&&(i=1,r="transformOrigin"===r?Hr:Qr),si(s,r);i&&(si(s,Qr),u&&(u.svg&&s.removeAttribute("transform"),xi(s,1),u.uncache=1))}},pi={clearProps:function(t,e,r,i,n){if("isFromStart"!==n.data){var s=t._pt=new mr(t._pt,e,r,0,0,ci);return s.u=i,s.pr=-10,s.tween=n,t._props.push(r),1}}},di=[1,0,0,1,0,0],_i={},mi=function(t){return"matrix(1, 0, 0, 1, 0, 0)"===t||"none"===t||!t},gi=function(t){var e=$r(t,Qr);return mi(e)?di:e.substr(7).match(et).map(kt)},vi=function(t,e){var r,i,n,s,a=t._gsap||bt(t),o=t.style,u=gi(t);return a.svg&&t.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(n=t.transform.baseVal.consolidate().matrix).a,n.b,n.c,n.d,n.e,n.f]).join(",")?di:u:(u!==di||t.offsetParent||t===br||a.svg||(n=o.display,o.display="block",(r=t.parentNode)&&t.offsetParent||(s=1,i=t.nextSibling,br.appendChild(t)),u=gi(t),n?o.display=n:si(t,"display"),s&&(i?r.insertBefore(t,i):r?r.appendChild(t):br.removeChild(t))),e&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},yi=function(t,e,r,i,n,s){var a,o,u,h=t._gsap,l=n||vi(t,!0),f=h.xOrigin||0,c=h.yOrigin||0,p=h.xOffset||0,d=h.yOffset||0,_=l[0],m=l[1],g=l[2],v=l[3],y=l[4],x=l[5],T=e.split(" "),w=parseFloat(T[0])||0,b=parseFloat(T[1])||0;r?l!==di&&(o=_*v-m*g)&&(u=w*(-m/o)+b*(_/o)-(_*x-m*y)/o,w=w*(v/o)+b*(-g/o)+(g*x-v*y)/o,b=u):(w=(a=ii(t)).x+(~T[0].indexOf("%")?w/100*a.width:w),b=a.y+(~(T[1]||T[0]).indexOf("%")?b/100*a.height:b)),i||!1!==i&&h.smooth?(y=w-f,x=b-c,h.xOffset=p+(y*_+x*g)-y,h.yOffset=d+(y*m+x*v)-x):h.xOffset=h.yOffset=0,h.xOrigin=w,h.yOrigin=b,h.smooth=!!i,h.origin=e,h.originIsAbsolute=!!r,t.style[Hr]="0px 0px",s&&(ai(s,h,"xOrigin",f,w),ai(s,h,"yOrigin",c,b),ai(s,h,"xOffset",p,h.xOffset),ai(s,h,"yOffset",d,h.yOffset)),t.setAttribute("data-svg-origin",w+" "+b)},xi=function(t,e){var r=t._gsap||new je(t);if("x"in r&&!e&&!r.uncache)return r;var i,n,s,a,o,u,h,l,f,c,p,d,_,m,g,v,y,x,T,w,b,O,M,k,A,C,D,S,P,R,E,F,B=t.style,I=r.scaleX<0,L="px",N="deg",Y=$r(t,Hr)||"0";return i=n=s=u=h=l=f=c=p=0,a=o=1,r.svg=!(!t.getCTM||!ni(t)),m=vi(t,r.svg),r.svg&&(k=(!r.uncache||"0px 0px"===Y)&&!e&&t.getAttribute("data-svg-origin"),yi(t,k||Y,!!k||r.originIsAbsolute,!1!==r.smooth,m)),d=r.xOrigin||0,_=r.yOrigin||0,m!==di&&(x=m[0],T=m[1],w=m[2],b=m[3],i=O=m[4],n=M=m[5],6===m.length?(a=Math.sqrt(x*x+T*T),o=Math.sqrt(b*b+w*w),u=x||T?Pr(T,x)*Dr:0,(f=w||b?Pr(w,b)*Dr+u:0)&&(o*=Math.abs(Math.cos(f*Sr))),r.svg&&(i-=d-(d*x+_*w),n-=_-(d*T+_*b))):(F=m[6],R=m[7],D=m[8],S=m[9],P=m[10],E=m[11],i=m[12],n=m[13],s=m[14],h=(g=Pr(F,P))*Dr,g&&(k=O*(v=Math.cos(-g))+D*(y=Math.sin(-g)),A=M*v+S*y,C=F*v+P*y,D=O*-y+D*v,S=M*-y+S*v,P=F*-y+P*v,E=R*-y+E*v,O=k,M=A,F=C),l=(g=Pr(-w,P))*Dr,g&&(v=Math.cos(-g),E=b*(y=Math.sin(-g))+E*v,x=k=x*v-D*y,T=A=T*v-S*y,w=C=w*v-P*y),u=(g=Pr(T,x))*Dr,g&&(k=x*(v=Math.cos(g))+T*(y=Math.sin(g)),A=O*v+M*y,T=T*v-x*y,M=M*v-O*y,x=k,O=A),h&&Math.abs(h)+Math.abs(u)>359.9&&(h=u=0,l=180-l),a=kt(Math.sqrt(x*x+T*T+w*w)),o=kt(Math.sqrt(M*M+F*F)),g=Pr(O,M),f=Math.abs(g)>2e-4?g*Dr:0,p=E?1/(E<0?-E:E):0),r.svg&&(k=t.getAttribute("transform"),r.forceCSS=t.setAttribute("transform","")||!mi($r(t,Qr)),k&&t.setAttribute("transform",k))),Math.abs(f)>90&&Math.abs(f)<270&&(I?(a*=-1,f+=u<=0?180:-180,u+=u<=0?180:-180):(o*=-1,f+=f<=0?180:-180)),r.x=i-((r.xPercent=i&&(r.xPercent||(Math.round(t.offsetWidth/2)===Math.round(-i)?-50:0)))?t.offsetWidth*r.xPercent/100:0)+L,r.y=n-((r.yPercent=n&&(r.yPercent||(Math.round(t.offsetHeight/2)===Math.round(-n)?-50:0)))?t.offsetHeight*r.yPercent/100:0)+L,r.z=s+L,r.scaleX=kt(a),r.scaleY=kt(o),r.rotation=kt(u)+N,r.rotationX=kt(h)+N,r.rotationY=kt(l)+N,r.skewX=f+N,r.skewY=c+N,r.transformPerspective=p+L,(r.zOrigin=parseFloat(Y.split(" ")[2])||0)&&(B[Hr]=Ti(Y)),r.xOffset=r.yOffset=0,r.force3D=z.force3D,r.renderTransform=r.svg?Ci:Ar?Ai:bi,r.uncache=0,r},Ti=function(t){return(t=t.split(" "))[0]+" "+t[1]},wi=function(t,e,r){var i=oe(e);return kt(parseFloat(e)+parseFloat(ui(t,"x",r+"px",i)))+i},bi=function(t,e){e.z="0px",e.rotationY=e.rotationX="0deg",e.force3D=0,Ai(t,e)},Oi="0deg",Mi="0px",ki=") ",Ai=function(t,e){var r=e||this,i=r.xPercent,n=r.yPercent,s=r.x,a=r.y,o=r.z,u=r.rotation,h=r.rotationY,l=r.rotationX,f=r.skewX,c=r.skewY,p=r.scaleX,d=r.scaleY,_=r.transformPerspective,m=r.force3D,g=r.target,v=r.zOrigin,y="",x="auto"===m&&t&&1!==t||!0===m;if(v&&(l!==Oi||h!==Oi)){var T,w=parseFloat(h)*Sr,b=Math.sin(w),O=Math.cos(w);w=parseFloat(l)*Sr,T=Math.cos(w),s=wi(g,s,b*T*-v),a=wi(g,a,-Math.sin(w)*-v),o=wi(g,o,O*T*-v+v)}_!==Mi&&(y+="perspective("+_+ki),(i||n)&&(y+="translate("+i+"%, "+n+"%) "),(x||s!==Mi||a!==Mi||o!==Mi)&&(y+=o!==Mi||x?"translate3d("+s+", "+a+", "+o+") ":"translate("+s+", "+a+ki),u!==Oi&&(y+="rotate("+u+ki),h!==Oi&&(y+="rotateY("+h+ki),l!==Oi&&(y+="rotateX("+l+ki),f===Oi&&c===Oi||(y+="skew("+f+", "+c+ki),1===p&&1===d||(y+="scale("+p+", "+d+ki),g.style[Qr]=y||"translate(0, 0)"},Ci=function(t,e){var r,i,n,s,a,o=e||this,u=o.xPercent,h=o.yPercent,l=o.x,f=o.y,c=o.rotation,p=o.skewX,d=o.skewY,_=o.scaleX,m=o.scaleY,g=o.target,v=o.xOrigin,y=o.yOrigin,x=o.xOffset,T=o.yOffset,w=o.forceCSS,b=parseFloat(l),O=parseFloat(f);c=parseFloat(c),p=parseFloat(p),(d=parseFloat(d))&&(p+=d=parseFloat(d),c+=d),c||p?(c*=Sr,p*=Sr,r=Math.cos(c)*_,i=Math.sin(c)*_,n=Math.sin(c-p)*-m,s=Math.cos(c-p)*m,p&&(d*=Sr,a=Math.tan(p-d),n*=a=Math.sqrt(1+a*a),s*=a,d&&(a=Math.tan(d),r*=a=Math.sqrt(1+a*a),i*=a)),r=kt(r),i=kt(i),n=kt(n),s=kt(s)):(r=_,s=m,i=n=0),(b&&!~(l+"").indexOf("px")||O&&!~(f+"").indexOf("px"))&&(b=ui(g,"x",l,"px"),O=ui(g,"y",f,"px")),(v||y||x||T)&&(b=kt(b+v-(v*r+y*n)+x),O=kt(O+y-(v*i+y*s)+T)),(u||h)&&(a=g.getBBox(),b=kt(b+u/100*a.width),O=kt(O+h/100*a.height)),a="matrix("+r+","+i+","+n+","+s+","+b+","+O+")",g.setAttribute("transform",a),w&&(g.style[Qr]=a)},Di=function(t,e,r,i,n,s){var a,o,u=360,h=V(n),l=parseFloat(n)*(h&&~n.indexOf("rad")?Dr:1),f=s?l*s:l-i,c=i+f+"deg";return h&&("short"===(a=n.split("_")[1])&&(f%=u)!=f%180&&(f+=f<0?u:-360),"cw"===a&&f<0?f=(f+36e9)%u-~~(f/u)*u:"ccw"===a&&f>0&&(f=(f-36e9)%u-~~(f/u)*u)),t._pt=o=new mr(t._pt,e,r,i,f,Ir),o.e=c,o.u="deg",t._props.push(r),o},Si=function(t,e){for(var r in e)t[r]=e[r];return t},Pi=function(t,e,r){var i,n,s,a,o,u,h,l=Si({},r._gsap),f=r.style;for(n in l.svg?(s=r.getAttribute("transform"),r.setAttribute("transform",""),f[Qr]=e,i=xi(r,1),si(r,Qr),r.setAttribute("transform",s)):(s=getComputedStyle(r)[Qr],f[Qr]=e,i=xi(r,1),f[Qr]=s),Cr)(s=l[n])!==(a=i[n])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(n)<0&&(o=oe(s)!==(h=oe(a))?ui(r,n,s,h):parseFloat(s),u=parseFloat(a),t._pt=new mr(t._pt,i,n,o,u-o,Br),t._pt.u=h||0,t._props.push(n));Si(i,l)};Mt("padding,margin,Width,Radius",(function(t,e){var r="Top",i="Right",n="Bottom",s="Left",a=(e<3?[r,i,n,s]:[r+s,r+i,n+i,n+s]).map((function(r){return e<2?t+r:"border"+r+t}));pi[e>1?"border"+t:t]=function(t,e,r,i,n){var s,o;if(arguments.length<4)return s=a.map((function(e){return hi(t,e,r)})),5===(o=s.join(" ")).split(s[0]).length?s[0]:o;s=(i+"").split(" "),o={},a.forEach((function(t,e){return o[t]=s[e]=s[e]||s[(e-1)/2|0]})),t.init(e,o,n)}}));var Ri,Ei,zi={name:"css",register:ti,targetTest:function(t){return t.style&&t.nodeType},init:function(t,e,r,i,n){var s,a,o,u,h,l,f,c,p,d,_,m,g,v,y,x,T,w,b,O=this._props,M=t.style,k=r.vars.startAt;for(f in Or||ti(),e)if("autoRound"!==f&&(a=e[f],!gt[f]||!$e(f,e,r,i,t,n)))if(h=typeof a,l=pi[f],"function"===h&&(h=typeof(a=a.call(r,i,t,n))),"string"===h&&~a.indexOf("random(")&&(a=ge(a)),l)l(this,t,f,a,r)&&(y=1);else if("--"===f.substr(0,2))s=(getComputedStyle(t).getPropertyValue(f)+"").trim(),a+="",De.lastIndex=0,De.test(s)||(c=oe(s),p=oe(a)),p?c!==p&&(s=ui(t,f,s,p)+p):c&&(a+=c),this.add(M,"setProperty",s,a,i,n,0,0,f),O.push(f);else if("undefined"!==h){if(k&&f in k?(s="function"==typeof k[f]?k[f].call(r,i,t,n):k[f],f in z.units&&!oe(s)&&(s+=z.units[f]),"="===(s+"").charAt(1)&&(s=hi(t,f))):s=hi(t,f),u=parseFloat(s),(d="string"===h&&"="===a.charAt(1)?+(a.charAt(0)+"1"):0)&&(a=a.substr(2)),o=parseFloat(a),f in Fr&&("autoAlpha"===f&&(1===u&&"hidden"===hi(t,"visibility")&&o&&(u=0),ai(this,M,"visibility",u?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==f&&"transform"!==f&&~(f=Fr[f]).indexOf(",")&&(f=f.split(",")[0])),_=f in Cr)if(m||((g=t._gsap).renderTransform&&!e.parseTransform||xi(t,e.parseTransform),v=!1!==e.smoothOrigin&&g.smooth,(m=this._pt=new mr(this._pt,M,Qr,0,1,g.renderTransform,g,0,-1)).dep=1),"scale"===f)this._pt=new mr(this._pt,g,"scaleY",g.scaleY,(d?d*o:o-g.scaleY)||0),O.push("scaleY",f),f+="X";else{if("transformOrigin"===f){T=void 0,w=void 0,b=void 0,w=(T=(x=a).split(" "))[0],b=T[1]||"50%","top"!==w&&"bottom"!==w&&"left"!==b&&"right"!==b||(x=w,w=b,b=x),T[0]=fi[w]||w,T[1]=fi[b]||b,a=T.join(" "),g.svg?yi(t,a,0,v,0,this):((p=parseFloat(a.split(" ")[2])||0)!==g.zOrigin&&ai(this,g,"zOrigin",g.zOrigin,p),ai(this,M,f,Ti(s),Ti(a)));continue}if("svgOrigin"===f){yi(t,a,1,v,0,this);continue}if(f in _i){Di(this,g,f,u,a,d);continue}if("smoothOrigin"===f){ai(this,g,"smooth",g.smooth,a);continue}if("force3D"===f){g[f]=a;continue}if("transform"===f){Pi(this,a,t);continue}}else f in M||(f=Kr(f)||f);if(_||(o||0===o)&&(u||0===u)&&!zr.test(a)&&f in M)o||(o=0),(c=(s+"").substr((u+"").length))!==(p=oe(a)||(f in z.units?z.units[f]:c))&&(u=ui(t,f,s,p)),this._pt=new mr(this._pt,_?g:M,f,u,d?d*o:o-u,_||"px"!==p&&"zIndex"!==f||!1===e.autoRound?Br:Nr),this._pt.u=p||0,c!==p&&(this._pt.b=s,this._pt.r=Lr);else if(f in M)li.call(this,t,f,s,a);else{if(!(f in t)){lt(f,a);continue}this.add(t,f,s||t[f],a,i,n)}O.push(f)}y&&_r(this)},get:hi,aliases:Fr,getSetter:function(t,e,r){var i=Fr[e];return i&&i.indexOf(",")<0&&(e=i),e in Cr&&e!==Hr&&(t._gsap.x||hi(t,"x"))?r&&kr===r?"scale"===e?jr:Vr:(kr=r||{})&&("scale"===e?Gr:Wr):t.style&&!W(t.style[e])?Xr:~e.indexOf("-")?qr:or(t,e)},core:{_removeProperty:si,_getMatrix:vi}};xr.utils.checkPrefix=Kr,Ei=Mt("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(Ri="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(t){Cr[t]=1})),Mt(Ri,(function(t){z.units[t]="deg",_i[t]=1})),Fr[Ei[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+Ri,Mt("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(t){var e=t.split(":");Fr[e[1]]=Ei[e[0]]})),Mt("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(t){z.units[t]="px"})),xr.registerPlugin(zi);var Fi=xr.registerPlugin(zi)||xr;Fi.core.Tween;const Bi=t=>t/1e3;class Ii{constructor(t){this.timeline=Fi.timeline(),this.element=document.createElement("span"),this.character=t,this.updateTimeline()}get isSpace(){return" "===this.character.text}render(){return this.element.classList.add("dia-dialogue__character"),this.isSpace&&this.element.classList.add("dia-dialogue__character--space"),this.element.appendChild(document.createTextNode(this.character.text)),this}updateTimeline(){const t=Fi.timeline();return t.delay(this.isSpace?0:Bi(this.character.speed)).set(this.element,{opacity:1}),this.timeline=t,this}}class Li{constructor(t){this.timeline=Fi.timeline(),this.characterRenderers=[],this.element=document.createElement("span"),this.characterRenderers=t.characters.map((t=>new Ii(t))),this.text=t,this.updateTimeline()}render(){return this.element.classList.add("dia-dialogue__text"),this.text.className&&this.element.classList.add(this.text.className),this.characterRenderers.forEach((t=>{this.element.appendChild(t.render().element)})),this}updateTimeline(){const t=Fi.timeline();return t.delay(Bi(this.text.delay)),this.characterRenderers.forEach((e=>{t.add(e.timeline)})),this.timeline=t,this}}class Ni{constructor(t){this.timeline=Fi.timeline(),this.textRenderers=[],this.element=document.createElement("p"),this.paragraph=t,this.textRenderers=t.text.map((t=>new Li(t))),this.updateTimeline()}render(){return this.element.classList.add("dia-dialogue__paragraph"),this.paragraph.className&&this.element.classList.add(this.paragraph.className),this.textRenderers.forEach((t=>{this.element.appendChild(t.render().element)})),this}updateTimeline(){const t=Fi.timeline();return this.textRenderers.forEach((e=>{t.add(e.timeline)})),this.timeline=t,this}}class Yi{constructor(t,e){this.timeline=Fi.timeline({paused:!0}),this.paragraphRenderers=[],this.dialogue=t,this.element=e,this.paragraphRenderers=t.paragraphs.map((t=>new Ni(t))),this.updateTimeline()}play(){return this.timeline.play(),this}render(){return this.element.classList.add("dia-dialogue__dialogue"),this.paragraphRenderers.forEach((t=>{this.element.appendChild(t.render().element)})),this}updateTimeline(){const t=Fi.timeline();return this.paragraphRenderers.forEach((e=>{t.add(e.timeline)})),this.timeline=t,this}}(()=>{const t=new e("Hi... ",{className:"docs__hi",speed:50}),n=new e("I'm dialogue.",{delay:750,speed:50}),s=new e("And I'm a second line.",{delay:750,speed:50}),a=new r([t,n],{className:"docs__paragraph"}),o=new r([s]),u=new i([a,o]),h=document.getElementById("dialogue");h&&new Yi(u,h).render().play()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,