(()=>{"use strict";class e{constructor(e,t=0,s=0){this.delay=0,this.speed=0,this.text="",this.text=e,this.speed=t,this.delay=s}}class t{constructor(t,s=0,r=0){this.delay=0,this.speed=0,this.letters=[],this.speed=s,this.delay=r;const n=Array.from(t);this.letters=n.map(((t,n)=>0===n?new e(t,s,r):new e(t,s)))}}class s{constructor(e,t=0,s=0){this.delay=0,this.speed=0,this.words=[],this.words=e,this.speed=t,this.delay=s}}class r{constructor(e){this.paragraphs=[],this.paragraphs=e}}class n{constructor(e){this.element=document.createElement("span"),this.element.classList.add("dia-dialogue__character")," "===e.text&&this.element.classList.add("dia-dialogue__character--space"),this.letter=e}render(){return this.element.appendChild(document.createTextNode(this.letter.text)),this}}class a{constructor(e){this.letterRenderers=[],this.element=document.createElement("span"),this.element.classList.add("dia-dialogue__word"),this.word=e}render(){return this.word.letters.forEach((e=>{const t=new n(e);this.element.appendChild(t.render().element),this.letterRenderers.push(t)})),this}}class i{constructor(e){this.letterRenderers=[],this.wordRenderers=[],this.element=document.createElement("p"),this.element.classList.add("dia-dialogue__paragraph"),this.paragraph=e}render(){return this.paragraph.words.forEach(((e,t)=>{const s=new a(e);this.element.appendChild(s.render().element),t!==this.paragraph.words.length-1&&this.element.appendChild(document.createTextNode(" ")),this.wordRenderers.push(s),this.letterRenderers=this.letterRenderers.concat(s.letterRenderers)})),this}}class d{constructor(e,t){this.letterRenderers=[],this.paragraphRenderers=[],this.dialogue=e,this.element=t}render(){this.dialogue.paragraphs.forEach((e=>{const t=new i(e);this.element.appendChild(t.render().element),this.paragraphRenderers.push(t),this.letterRenderers=this.letterRenderers.concat(t.letterRenderers)}));let e=window.gsap.timeline();return this.letterRenderers.forEach(((t,s)=>{const r=.02*s,n=window.gsap.timeline(),a=window.CustomEase.create("custom","M0,0 C0.34,0.114 0.362,0.902 0.362,1 0.37,0.985 0.414,0.873 0.455,0.811 0.51,0.726 0.573,0.753 0.586,0.762 0.662,0.812 0.719,0.981 0.726,0.998 0.788,0.914 0.84,0.936 0.859,0.95 0.878,0.964 0.897,0.985 0.911,0.998 0.922,0.994 0.939,0.984 0.954,0.984 0.969,0.984 1,1 1,1 ");n.set(t.element,{opacity:1}).from(t.element,{duration:.95,y:-10,ease:a}),e.add(n,r)})),this}}(()=>{const e=new t("Hi...",50),n=new t("I'm dialogue.",50,750),a=new t("And I'm a second line.",50,1e3),i=new s([e,n]),h=new s([a]),l=new r([i,h]),c=document.getElementById("dialogue");c&&new d(l,c).render()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,